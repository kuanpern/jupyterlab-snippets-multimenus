[
  [
    "Snippets01",
    [
      [
        "Astropy",
        [
          [
            "Constants",
            [
              "Astronomical Unit [(mathrm{m})].py",
              "Atmosphere [(mathrm{Pa})].py",
              "Atomic mass [(mathrm{kg})].py",
              "Avogadro\u2019s number [(1  mathrm{mol})].py",
              "Bohr magneton [(mathrm{J}mathrm{T})].py",
              "Bohr radius [(mathrm{m})].py",
              "Boltzmann constant [(mathrm{J}  mathrm{K})].py",
              "Converting to SI.py",
              "Converting to cgs.py",
              "Earth equatorial radius [(mathrm{m})].py",
              "Earth mass [(mathrm{kg})].py",
              "Electric constant [(mathrm{F}mathrm{m})].py",
              "Electron charge [(mathrm{C})].py",
              "Electron mass [(mathrm{kg})].py",
              "Extracting uncertainty.py",
              "Extracting units.py",
              "Extracting value.py",
              "Fine-structure constant (dimensionless).py",
              "Gas constant [(mathrm{J}  (mathrm{K}, mathrm{mol}))].py",
              "Gravitational constant [(mathrm{m}^3  (mathrm{kg}, mathrm{s}^2))].py",
              "Jupiter equatorial radius [(mathrm{m})].py",
              "Jupiter mass [(mathrm{kg})].py",
              "Kiloparsec [(mathrm{m})].py",
              "Magnetic constant [(mathrm{N}mathrm{A}^2)].py",
              "Neutron mass [(mathrm{kg})].py",
              "Parsec [(mathrm{m})].py",
              "Planck constant [(mathrm{J}, mathrm{s})].py",
              "Proton mass [(mathrm{kg})].py",
              "Reduced Planck constant [(mathrm{J}, mathrm{s})].py",
              "Rydberg constant [(1  mathrm{m})].py",
              "Setup.py",
              "Solar luminosity [(mathrm{W})].py",
              "Solar mass [(mathrm{kg})].py",
              "Solar radius [(mathrm{m})].py",
              "Speed of light in vacuum [(mathrm{m}  mathrm{s})].py",
              "Standard acceleration of gravity [(mathrm{m}  mathrm{s}^2)].py",
              "Stefan-Boltzmann constant [(mathrm{W}  (mathrm{K}^4, mathrm{m}^2))].py",
              "Wien wavelength displacement law constant [(mathrm{m}, mathrm{K})].py"
            ]
          ]
        ]
      ],
      [
        "Matplotlib",
        [
          [
            "Example plots",
            [
              "3-d plot.py",
              "Basic line plot.py",
              "Contour plot.py",
              "Error bars.py",
              "Grouped plots.py",
              "Histogram.py"
            ]
          ],
          "Save the current figure.py",
          "Setup for notebook.py",
          "Setup for scripts.py"
        ]
      ],
      [
        "NumPy",
        [
          [
            "Creating arrays",
            [
              "Array from list of data.py",
              "Coordinate matrices from coordinate vectors.py",
              "Copy of existing data.py",
              "Evenly spaced numbers over a specified interval.py",
              "Evenly spaced values within a given interval.py",
              "New array of given shape.py",
              "New array shaped like another.py",
              "Numbers spaced evenly on a log scale.py",
              "Return copy of arrays, combined into one.py",
              "Return views of the data, split at given indices along given axis.py",
              "Return views of the data, split into $N$ groups.py"
            ]
          ],
          [
            "File IO",
            [
              "Read data from .npy or .npz file.py",
              "Read data from simple text file.py",
              "Read data from text file with missing values.py",
              "Write multiple arrays to single .npy file.py",
              "Write multiple arrays to single .npz file.py",
              "Write multiple arrays to single compressed .npz file.py",
              "Write multiple arrays to text file.py",
              "Write single array to single .npy file.py",
              "Write single array to text file.py"
            ]
          ],
          [
            "Indexing and testing arrays",
            [
              "Get number of dimensions of array.py",
              "Get shape of array.py",
              [
                "Index a multi-dimensional array",
                [
                  "Get elements $N$ to $M$ along each final axis.py",
                  "Get elements satisfying a condition (flattened result).py",
                  "Get first $N$ elements along each final axis.py",
                  "Get last $N$ elements along each final axis.py",
                  "Get one element.py"
                ]
              ],
              [
                "Index a one-dimensional array",
                [
                  "Get elements $N$ to $M$.py",
                  "Get elements satisfying a condition.py",
                  "Get first $N$ elements.py",
                  "Get last $N$ elements.py",
                  "Get one element.py"
                ]
              ],
              [
                "Index an array of unknown dimension",
                [
                  "Get elements $N$ to $M$ along each final axis.py",
                  "Get elements satisfying a condition (flattened result).py",
                  "Get first $N$ elements along each final axis.py",
                  "Get last $N$ elements along each final axis.py"
                ]
              ],
              "Test if array is empty.py"
            ]
          ],
          [
            "Polynomials",
            [
              "Convert between types.py",
              "Differentiate $n$ times.py",
              "Differentiate once.py",
              "Evaluate polynomial at given points.py",
              "Find roots.py",
              "Fit to data with series of degree $n$.py",
              "Get coefficients (constant at index 0, higher indices for higher orders).py",
              "Get degree of polynomial (one less than number of coefficients).py",
              "Get domain (scaled and offset domain of function for fitting).py",
              "Get window (natural domain of basis functions).py",
              "Instantiate from basis element $n$.py",
              "Instantiate from coefficients.py",
              "Instantiate from roots.py",
              "Integrate $n$ times.py",
              "Integrate once.py",
              "Integrate with given lower bound and integration constant $k$.py",
              "Return $n$ equally spaced $(x,y)$ values.py",
              "Setup.py"
            ]
          ],
          [
            "Pretty printing",
            [
              "Context manager.py",
              [
                "Formatting functions for specific dtypes",
                [
                  "Set formatter for `bool` type.py",
                  "Set formatter for `complexfloat` type.py",
                  "Set formatter for `datetime` type.py",
                  "Set formatter for `float` type.py",
                  "Set formatter for `int` type.py",
                  "Set formatter for `longcomplexfloat` type.py",
                  "Set formatter for `longfloat` type.py",
                  "Set formatter for `timedelta` type.py",
                  "Set formatter for all `complex` types.py",
                  "Set formatter for all `float` types.py",
                  "Set formatter for all `int` types.py",
                  "Set formatter for all `str` types.py",
                  "Set formatter for all types.py"
                ]
              ],
              "Print $N$ elements at each end of a summary.py",
              "Print to given precision.py",
              "Set number of characters per line.py",
              "Set string with which to represent infinity.py",
              "Set string with which to represent nan.py",
              "Summarize arrays with more than $N+1$ elements.py",
              "Suppress printing of small values.py"
            ]
          ],
          [
            "Reshaping and viewing arrays",
            [
              "Exchange two axes in an array.py",
              "Permute axes, bringing given axis into new position.py",
              "Permute indices by a given amount along the given axis.py",
              "Return a copy of the data, cast to a different dtype.py",
              "Return a copy of the data, flattened to 1-D.py",
              "Return a view of the data with indices permuted.py",
              "Return a view of the data with indices reversed (transposed).py",
              "Return a view of the data, flattened to 1-D.py",
              "Return a view of the data, with a different dtype.py",
              "Return a view of the data, with a different shape.py",
              "Return a view of the data, with an extra axis.py",
              "Return copy of arrays, combined into one.py",
              "Return views of the data, split at given indices along given axis.py",
              "Return views of the data, split into $N$ groups.py"
            ]
          ],
          "Setup.py",
          [
            "Vectorized (universal) functions",
            [
              [
                "Arithmetic",
                [
                  "absolute Calculate the absolute value element-wise.py",
                  "add Add arguments element-wise.py",
                  "conj Return the complex conjugate, element-wise.py",
                  "divide Divide arguments element-wise.py",
                  "floor_divide Return the largest integer smaller or equal to the division of the inputs.py",
                  "fmod Return element-wise remainder of float division.py",
                  "mod Return element-wise remainder of integer division.py",
                  "modf Return the fractional and integral parts of an array, element-wise.py",
                  "multiply Multiply arguments element-wise.py",
                  "negative Numerical negative, element-wise.py",
                  "reciprocal Return the reciprocal of the argument, element-wise.py",
                  "remainder Return element-wise remainder of integer division.py",
                  "rint Round elements of the array to the nearest integer.py",
                  "sign Returns an element-wise indication of the sign of a number.py",
                  "sqrt Return the positive square-root of an array, element-wise with automatic domain.py",
                  "sqrt Return the positive square-root of an array, element-wise.py",
                  "square Return the element-wise square of the input.py",
                  "subtract Subtract arguments, element-wise.py",
                  "true_divide Returns a true division of the inputs, element-wise.py"
                ]
              ],
              [
                "Bit-twiddling functions",
                [
                  "bitwise_and Compute the bit-wise AND of two arrays element-wise.py",
                  "bitwise_or Compute the bit-wise OR of two arrays element-wise.py",
                  "bitwise_xor Compute the bit-wise XOR of two arrays element-wise.py",
                  "invert Compute bit-wise inversion, or bit-wise NOT, element-wise.py",
                  "left_shift Shift the bits of an integer to the left.py",
                  "right_shift Shift the bits of an integer to the right.py"
                ]
              ],
              [
                "Characterizing arrays",
                [
                  "all Returns True if all elements evaluate to True.py",
                  "any Returns True if any of the elements of a evaluate to True.py",
                  "argmax Return indices of the maximum values along the given axis.py",
                  "argmin Return indices of the minimum values along the given axis of a.py",
                  "max Return the maximum along a given axis.py",
                  "mean Returns the average of the array elements along given axis.py",
                  "min Return the minimum along a given axis.py",
                  "ptp Peak-to-peak (maximum - minimum) value along a given axis.py",
                  "std Returns the standard deviation of the array elements along given axis.py",
                  "trace Return the sum along diagonals of the array.py",
                  "var Returns the variance of the array elements, along given axis.py"
                ]
              ],
              [
                "Comparisons between two arrays",
                [
                  "equal Return $(x_1 == x_2)$ element-wise.py",
                  "fmax Element-wise maximum of array elements.py",
                  "fmin Element-wise minimum of array elements.py",
                  "greater Return the truth value of $(x_1  x_2)$ element-wise.py",
                  "greater_equal Return the truth value of $(x_1 geq x_2)$ element-wise.py",
                  "less Return the truth value of $(x_1  x_2)$ element-wise.py",
                  "less_equal Return the truth value of $(x_1 leq x_2)$ element-wise.py",
                  "logical_and Compute the truth value of $x_1$ AND $x_2$ element-wise.py",
                  "logical_not Compute the truth value of NOT $x$ element-wise.py",
                  "logical_or Compute the truth value of $x_1$ OR $x_2$ element-wise.py",
                  "logical_xor Compute the truth value of $x_1$ XOR $x_2$, element-wise.py",
                  "maximum Element-wise maximum of array elements.py",
                  "minimum Element-wise minimum of array elements.py",
                  "not_equal Return $(x_1 != x_2)$ element-wise.py"
                ]
              ],
              [
                "Complex numbers",
                [
                  "angle Angle of the complex argument.py",
                  "conj Complex conjugate, element-wise.py",
                  "imag Imaginary part of the elements of the array.py",
                  "real Real part of the elements of the array.py",
                  "unwrap Unwrap radian phase by changing jumps greater than $pi$ to their $2pi$ complement.py"
                ]
              ],
              [
                "Float functions",
                [
                  "ceil Return the ceiling of the input, element-wise.py",
                  "copysign Change the sign of $x_1$ to that of $x_2$, element-wise.py",
                  "floor Return the floor of the input, element-wise.py",
                  "fmod Return the element-wise remainder of division.py",
                  "frexp Decompose the elements of $x$ into mantissa and twos exponent.py",
                  "iscomplex Returns a bool array, where True if input element is complex.py",
                  "isfinite Test element-wise for finiteness (not infinity and not NaN).py",
                  "isinf Test element-wise for positive or negative infinity.py",
                  "isnan Test element-wise for NaN and return result as a boolean array.py",
                  "isreal Returns a bool array, where True if input element is real.py",
                  "ldexp Returns $x_1, 2^{x_2}$, element-wise.py",
                  "modf Return the fractional and integral parts of an array, element-wise.py",
                  "nextafter Return the next floating-point value after $x_1$ towards $x_2$, element-wise.py",
                  "signbit Returns element-wise True where signbit is set (less than zero).py",
                  "trunc Return the truncated value of the input, element-wise.py"
                ]
              ],
              [
                "Logarithms and exponentials",
                [
                  "exp Calculate the exponential of all elements in the input array.py",
                  "exp2 Calculate $2^p$ for all $p$ in the input array.py",
                  "expm1 Calculate $exp(x) - 1$ for all elements in the array.py",
                  "log Natural logarithm, element-wise with automatic domain.py",
                  "log Natural logarithm, element-wise.py",
                  "log10 Return the base 10 logarithm of the input array, element-wise with automatic domain.py",
                  "log10 Return the base 10 logarithm of the input array, element-wise.py",
                  "log1p Calculate $log(1+x)$ for all elements in the array.py",
                  "log2 Base-2 logarithm of $x$ with automatic domain.py",
                  "log2 Base-2 logarithm of $x$.py",
                  "logaddexp Logarithm of the sum of exponentiations of the inputs.py",
                  "logaddexp2 Logarithm of the sum of exponentiations of the inputs in base-2.py",
                  "logn Return the base $n$ logarithm of the input array, element-wise with automatic domain.py",
                  "power First array elements raised to powers from second array, element-wise with automatic domain.py",
                  "power First array elements raised to powers from second array, element-wise.py",
                  "reciprocal Return the reciprocal of the argument, element-wise.py",
                  "sqrt Return the positive square-root of an array, element-wise with automatic domain.py",
                  "sqrt Return the positive square-root of an array, element-wise.py",
                  "square Return the element-wise square of the input.py"
                ]
              ],
              [
                "Matrix and vector products",
                [
                  "cross Cross product of two (arrays of) vectors.py",
                  "dot Dot product of two arrays over last and second-to-last dimensions, respectively.py",
                  "einsum Evaluate Einstein summation convention on operands.py",
                  "inner Inner product, summing over last two axes.py",
                  "kron Kronecker product of arrays.py",
                  "outer Compute outer product of two vectors (automatically flattened).py",
                  "tensordot Tensor dot product over given pairs of axes.py",
                  "tensordot Tensor dot product over last $n$ axes of a and first $n$ of b.py",
                  "vdot Dot product of two complex vectors, conjugating the first.py"
                ]
              ],
              [
                "Rounding and clipping",
                [
                  "around Evenly round to the given number of decimals.py",
                  "ceil Ceiling of the input, element-wise.py",
                  "clip Clip (limit) the values in an array.py",
                  "fix Round to nearest integer towards zero.py",
                  "floor Floor of the input, element-wise.py",
                  "nan_to_num Replace NaNs with zero and inf with finite numbers.py",
                  "real_if_close Truncate complex parts if within `tol` times machine epsilon of zero.py",
                  "rint Round elements of the array to the nearest integer.py",
                  "trunc Truncated value of the input, element-wise.py"
                ]
              ],
              [
                "Special functions (see scipy.special)",
                [
                  "i0 Modified Bessel function of the first kind, order 0.py",
                  "sinc Return the sinc function.py"
                ]
              ],
              [
                "Sums, products, differences within array",
                [
                  "convolve Discrete, linear convolution of two one-dimensional sequences.py",
                  "cumprod Cumulative product of elements along a given axis.py",
                  "cumsum Cumulative sum of the elements along a given axis.py",
                  "diff Calculate the n-th order discrete difference along given axis.py",
                  "ediff1d Differences between consecutive elements of an array.py",
                  "gradient Gradient of an N-dimensional array.py",
                  "interp One-dimensional linear interpolation.py",
                  "nansum Sum of array elements over a given axis treating NaNs as zero.py",
                  "prod Product of array elements over a given axis.py",
                  "sum Sum of array elements over a given axis.py",
                  "trapz Integrate along the given axis using the composite trapezoidal rule.py"
                ]
              ],
              [
                "Trigonometric and hyperbolic functions",
                [
                  "arccos Trigonometric inverse cosine, element-wise with automatic domain.py",
                  "arccos Trigonometric inverse cosine, element-wise.py",
                  "arccosh Inverse hyperbolic cosine, element-wise.py",
                  "arcsin Trigonometric inverse sine, element-wise with automatic domain.py",
                  "arcsin Trigonometric inverse sine, element-wise.py",
                  "arcsinh Inverse hyperbolic sine element-wise.py",
                  "arctan Trigonometric inverse tangent, element-wise.py",
                  "arctan2 Element-wise arc tangent of $x_1x_2$ choosing the quadrant correctly.py",
                  "arctanh Inverse hyperbolic tangent, element-wise with automatic domain.py",
                  "arctanh Inverse hyperbolic tangent, element-wise.py",
                  "cos Cosine element-wise.py",
                  "cosh Hyperbolic cosine, element-wise.py",
                  "deg2rad Convert angles from degrees to radians.py",
                  "hypot Given the \u201clegs\u201d of a right triangle, return its hypotenuse.py",
                  "rad2deg Convert angles from radians to degrees.py",
                  "sin Trigonometric sine, element-wise.py",
                  "sinh Hyperbolic sine, element-wise.py",
                  "tan Compute tangent element-wise.py",
                  "tanh Compute hyperbolic tangent element-wise.py",
                  "unwrap Unwrap radian phase by changing jumps greater than $pi$ to their $2pi$ complement.py"
                ]
              ]
            ]
          ]
        ]
      ],
      [
        "Python",
        [
          [
            "Basic file inputoutput",
            [
              "Read file into string, operating on each line.py",
              "Read file into string.py"
            ]
          ],
          [
            "Defining classes",
            [
              "Complicated class.py",
              "Simple class.py",
              "Subclass.py"
            ]
          ],
          [
            "Defining functions",
            [
              "Complicated function.py",
              "Simple function.py"
            ]
          ],
          [
            "Lists",
            [
              "Conditional alternative list comprehension.py",
              "Conditional list comprehension.py",
              "List comprehension.py",
              "Reversed list.py",
              "Sort two lists at the same time.py",
              "Sorted list.py"
            ]
          ],
          [
            "Regular expressions",
            [
              "Basic search (match) for exact pattern at beginning of string.py",
              "Basic search for pattern anywhere in string.py",
              "Basic substitution.py",
              [
                "Character classes and alternatives",
                [
                  "Alternatives.py",
                  "Exclusive character classes.py",
                  "Inclusive character classes.py",
                  [
                    "Standard character-class abbreviations",
                    [
                      "Any alphanumeric character.py",
                      "Any decimal digit.py",
                      "Any non-alphanumeric character.py",
                      "Any non-digit character.py",
                      "Any non-whitespace character.py",
                      "Any whitespace character.py"
                    ]
                  ]
                ]
              ],
              [
                "Compilation flags",
                [
                  "Display debug info about compiled regex.py",
                  "Do case-insensitive matches.py",
                  "Enable verbose REs, for cleaner and more organized code.py",
                  "Make . match any character, including newlines.py",
                  "Make w, W, b, B, s, and S Unicode aware.py",
                  "Make w, W, b, B, s, and S dependent on the current locale.py",
                  "Multi-line matching, affecting ^ and $.py"
                ]
              ],
              [
                "Escaped special characters",
                [
                  "$.py",
                  "(.py",
                  ").py",
                  "+.py",
                  ".py",
                  "[.py",
                  "].py",
                  "^.py",
                  "{.py",
                  "}.py"
                ]
              ],
              [
                "Lookaheadbehind",
                [
                  "Negative lookahead.py",
                  "Negative lookbehind.py",
                  "Positive lookahead.py",
                  "Positive lookbehind.py"
                ]
              ],
              [
                "Repetition",
                [
                  "Match 0 or 1 repetitions of the preceding, greedily.py",
                  "Match 0 or 1 repetitions of the preceding, non-greedily.py",
                  "Match 0 or more repetitions of the preceding, greedily.py",
                  "Match 0 or more repetitions of the preceding, non-greedily.py",
                  "Match 1 or more repetitions of the preceding, greedily.py",
                  "Match 1 or more repetitions of the preceding, non-greedily.py",
                  "Match between m and n repetions of the preceding, greedily.py",
                  "Match between m and n repetions of the preceding, non-greedily.py",
                  "Match exactly n repeititions of the preceding.py"
                ]
              ],
              "Setup.py",
              "Substitution with backreferences.py"
            ]
          ],
          "Setup.py"
        ]
      ],
      [
        "SciPy",
        [
          [
            "Fast Fourier Transform routines",
            [
              "Setup.py"
            ]
          ],
          [
            "Integration and ODE solvers",
            [
              [
                "Integrate given fixed samples",
                [
                  "Romberg Integration to compute integral from $2^k + 1$ evenly spaced samples.py",
                  "Simpson's rule to compute integral from samples.py",
                  "Trapezoidal rule to compute integral from samples.py",
                  "Trapezoidal rule to cumulatively compute integral from samples.py"
                ]
              ],
              [
                "Integrate given function object",
                [
                  "General purpose double integration.py",
                  "General purpose n-fold integration.py",
                  "General purpose triple integration.py",
                  "General-purpose integration.py",
                  "Integrate func(x) using Gaussian quadrature of order $n$.py",
                  "Integrate using Romberg integration.py",
                  "Integrate with given tolerance using Gaussian quadrature.py"
                ]
              ],
              [
                "Numerically integrate ODE systems",
                [
                  "General integration of ordinary differential equations with known gradient.py",
                  "General integration of ordinary differential equations.py",
                  "Integrate ODE using VODE and ZVODE routines.py"
                ]
              ],
              "Setup.py"
            ]
          ],
          [
            "Interpolation and smoothing splines",
            [
              "InterpolatedUnivariateSpline.py",
              "Setup.py",
              "interp1d.py",
              "splrep  splrev.py"
            ]
          ],
          [
            "Linear algebra",
            [
              "Setup.py"
            ]
          ],
          [
            "Optimization and root-finding routines",
            [
              [
                "Constrained multivariate minimization",
                [
                  "Constrained Sequential Least SQuares Programming (SLSQP).py",
                  "Unconstrained Sequential Least SQuares Programming (SLSQP).py"
                ]
              ],
              [
                "Fitting (see also numpy.polynomial)",
                [
                  "Basic function fitting.py"
                ]
              ],
              [
                "General-purpose optimization",
                [
                  "Broyden-Fletcher-Goldfarb-Shanno (BFGS), analytical derivative.py",
                  "Broyden-Fletcher-Goldfarb-Shanno (BFGS), finite-difference derivative.py",
                  "Nelder-Mead Simplex algorithm.py",
                  "Newton-Conjugate-Gradient, Hessian product.py",
                  "Newton-Conjugate-Gradient, full Hessian.py"
                ]
              ],
              [
                "Scalar function minimization",
                [
                  "Bounded minimization.py",
                  "Unconstrained minimization.py"
                ]
              ],
              "Setup.py"
            ]
          ],
          [
            "Physical and mathematical constants",
            [
              [
                "CODATA physical constants",
                [
                  [
                    "A",
                    [
                      "Angstrom star.py",
                      "Avogadro constant.py",
                      "alpha particle mass energy equivalent in MeV.py",
                      "alpha particle mass energy equivalent.py",
                      "alpha particle mass in u.py",
                      "alpha particle mass.py",
                      "alpha particle molar mass.py",
                      "alpha particle-electron mass ratio.py",
                      "alpha particle-proton mass ratio.py",
                      "atomic mass constant energy equivalent in MeV.py",
                      "atomic mass constant energy equivalent.py",
                      "atomic mass constant.py",
                      "atomic mass unit-electron volt relationship.py",
                      "atomic mass unit-hartree relationship.py",
                      "atomic mass unit-hertz relationship.py",
                      "atomic mass unit-inverse meter relationship.py",
                      "atomic mass unit-joule relationship.py",
                      "atomic mass unit-kelvin relationship.py",
                      "atomic mass unit-kilogram relationship.py",
                      "atomic unit of 1st hyperpolarizability.py",
                      "atomic unit of 2nd hyperpolarizability.py",
                      "atomic unit of action.py",
                      "atomic unit of charge density.py",
                      "atomic unit of charge.py",
                      "atomic unit of current.py",
                      "atomic unit of electric dipole mom.py",
                      "atomic unit of electric field gradient.py",
                      "atomic unit of electric field.py",
                      "atomic unit of electric polarizability.py",
                      "atomic unit of electric potential.py",
                      "atomic unit of electric quadrupole mom.py",
                      "atomic unit of energy.py",
                      "atomic unit of force.py",
                      "atomic unit of length.py",
                      "atomic unit of mag. dipole mom.py",
                      "atomic unit of mag. flux density.py",
                      "atomic unit of magnetizability.py",
                      "atomic unit of mass.py",
                      "atomic unit of mom.um.py",
                      "atomic unit of permittivity.py",
                      "atomic unit of time.py",
                      "atomic unit of velocity.py"
                    ]
                  ],
                  [
                    "B",
                    [
                      "Bohr magneton in HzT.py",
                      "Bohr magneton in KT.py",
                      "Bohr magneton in eVT.py",
                      "Bohr magneton in inverse meters per tesla.py",
                      "Bohr magneton.py",
                      "Bohr radius.py",
                      "Boltzmann constant in HzK.py",
                      "Boltzmann constant in eVK.py",
                      "Boltzmann constant in inverse meters per kelvin.py",
                      "Boltzmann constant.py"
                    ]
                  ],
                  [
                    "C",
                    [
                      "Compton wavelength over (2pi).py",
                      "Compton wavelength.py",
                      "Cu x unit.py",
                      "characteristic impedance of vacuum.py",
                      "classical electron radius.py",
                      "conductance quantum.py",
                      "conventional value of Josephson constant.py",
                      "conventional value of von Klitzing constant.py"
                    ]
                  ],
                  [
                    "D",
                    [
                      "deuteron g factor.py",
                      "deuteron mag. mom. to Bohr magneton ratio.py",
                      "deuteron mag. mom. to nuclear magneton ratio.py",
                      "deuteron mag. mom.py",
                      "deuteron mass energy equivalent in MeV.py",
                      "deuteron mass energy equivalent.py",
                      "deuteron mass in u.py",
                      "deuteron mass.py",
                      "deuteron molar mass.py",
                      "deuteron rms charge radius.py",
                      "deuteron-electron mag. mom. ratio.py",
                      "deuteron-electron mass ratio.py",
                      "deuteron-neutron mag. mom. ratio.py",
                      "deuteron-proton mag. mom. ratio.py",
                      "deuteron-proton mass ratio.py"
                    ]
                  ],
                  [
                    "E",
                    [
                      "electric constant.py",
                      "electron charge to mass quotient.py",
                      "electron g factor.py",
                      "electron gyromag. ratio over 2 pi.py",
                      "electron gyromag. ratio.py",
                      "electron mag. mom. anomaly.py",
                      "electron mag. mom. to Bohr magneton ratio.py",
                      "electron mag. mom. to nuclear magneton ratio.py",
                      "electron mag. mom.py",
                      "electron mass energy equivalent in MeV.py",
                      "electron mass energy equivalent.py",
                      "electron mass in u.py",
                      "electron mass.py",
                      "electron molar mass.py",
                      "electron to alpha particle mass ratio.py",
                      "electron to shielded helion mag. mom. ratio.py",
                      "electron to shielded proton mag. mom. ratio.py",
                      "electron volt-atomic mass unit relationship.py",
                      "electron volt-hartree relationship.py",
                      "electron volt-hertz relationship.py",
                      "electron volt-inverse meter relationship.py",
                      "electron volt-joule relationship.py",
                      "electron volt-kelvin relationship.py",
                      "electron volt-kilogram relationship.py",
                      "electron volt.py",
                      "electron-deuteron mag. mom. ratio.py",
                      "electron-deuteron mass ratio.py",
                      "electron-helion mass ratio.py",
                      "electron-muon mag. mom. ratio.py",
                      "electron-muon mass ratio.py",
                      "electron-neutron mag. mom. ratio.py",
                      "electron-neutron mass ratio.py",
                      "electron-proton mag. mom. ratio.py",
                      "electron-proton mass ratio.py",
                      "electron-tau mass ratio.py",
                      "electron-triton mass ratio.py",
                      "elementary charge over h.py",
                      "elementary charge.py"
                    ]
                  ],
                  "Example.py",
                  [
                    "F",
                    [
                      "Faraday constant for conventional electric current.py",
                      "Faraday constant.py",
                      "Fermi coupling constant.py",
                      "fine-structure constant.py",
                      "first radiation constant for spectral radiance.py",
                      "first radiation constant.py"
                    ]
                  ],
                  [
                    "H",
                    [
                      "Hartree energy in eV.py",
                      "Hartree energy.py",
                      "hartree-atomic mass unit relationship.py",
                      "hartree-electron volt relationship.py",
                      "hartree-hertz relationship.py",
                      "hartree-inverse meter relationship.py",
                      "hartree-joule relationship.py",
                      "hartree-kelvin relationship.py",
                      "hartree-kilogram relationship.py",
                      "helion g factor.py",
                      "helion mag. mom. to Bohr magneton ratio.py",
                      "helion mag. mom. to nuclear magneton ratio.py",
                      "helion mag. mom.py",
                      "helion mass energy equivalent in MeV.py",
                      "helion mass energy equivalent.py",
                      "helion mass in u.py",
                      "helion mass.py",
                      "helion molar mass.py",
                      "helion-electron mass ratio.py",
                      "helion-proton mass ratio.py",
                      "hertz-atomic mass unit relationship.py",
                      "hertz-electron volt relationship.py",
                      "hertz-hartree relationship.py",
                      "hertz-inverse meter relationship.py",
                      "hertz-joule relationship.py",
                      "hertz-kelvin relationship.py",
                      "hertz-kilogram relationship.py"
                    ]
                  ],
                  [
                    "I",
                    [
                      "inverse fine-structure constant.py",
                      "inverse meter-atomic mass unit relationship.py",
                      "inverse meter-electron volt relationship.py",
                      "inverse meter-hartree relationship.py",
                      "inverse meter-hertz relationship.py",
                      "inverse meter-joule relationship.py",
                      "inverse meter-kelvin relationship.py",
                      "inverse meter-kilogram relationship.py",
                      "inverse of conductance quantum.py"
                    ]
                  ],
                  [
                    "J",
                    [
                      "Josephson constant.py",
                      "joule-atomic mass unit relationship.py",
                      "joule-electron volt relationship.py",
                      "joule-hartree relationship.py",
                      "joule-hertz relationship.py",
                      "joule-inverse meter relationship.py",
                      "joule-kelvin relationship.py",
                      "joule-kilogram relationship.py"
                    ]
                  ],
                  [
                    "K",
                    [
                      "kelvin-atomic mass unit relationship.py",
                      "kelvin-electron volt relationship.py",
                      "kelvin-hartree relationship.py",
                      "kelvin-hertz relationship.py",
                      "kelvin-inverse meter relationship.py",
                      "kelvin-joule relationship.py",
                      "kelvin-kilogram relationship.py",
                      "kilogram-atomic mass unit relationship.py",
                      "kilogram-electron volt relationship.py",
                      "kilogram-hartree relationship.py",
                      "kilogram-hertz relationship.py",
                      "kilogram-inverse meter relationship.py",
                      "kilogram-joule relationship.py",
                      "kilogram-kelvin relationship.py"
                    ]
                  ],
                  [
                    "L",
                    [
                      "Loschmidt constant (273.15 K, 100 kPa).py",
                      "Loschmidt constant (273.15 K, 101.325 kPa).py",
                      "lattice parameter of silicon.py"
                    ]
                  ],
                  [
                    "M",
                    [
                      "Mo x unit.py",
                      "mag. constant.py",
                      "mag. flux quantum.py",
                      "molar Planck constant times c.py",
                      "molar Planck constant.py",
                      "molar gas constant.py",
                      "molar mass constant.py",
                      "molar mass of carbon-12.py",
                      "molar volume of ideal gas (273.15 K, 100 kPa).py",
                      "molar volume of ideal gas (273.15 K, 101.325 kPa).py",
                      "molar volume of silicon.py",
                      "muon Compton wavelength over 2 pi.py",
                      "muon Compton wavelength.py",
                      "muon g factor.py",
                      "muon mag. mom. anomaly.py",
                      "muon mag. mom. to Bohr magneton ratio.py",
                      "muon mag. mom. to nuclear magneton ratio.py",
                      "muon mag. mom.py",
                      "muon mass energy equivalent in MeV.py",
                      "muon mass energy equivalent.py",
                      "muon mass in u.py",
                      "muon mass.py",
                      "muon molar mass.py",
                      "muon-electron mass ratio.py",
                      "muon-neutron mass ratio.py",
                      "muon-proton mag. mom. ratio.py",
                      "muon-proton mass ratio.py",
                      "muon-tau mass ratio.py"
                    ]
                  ],
                  [
                    "N",
                    [
                      "Newtonian constant of gravitation over h-bar c.py",
                      "Newtonian constant of gravitation.py",
                      "natural unit of action in eV s.py",
                      "natural unit of action.py",
                      "natural unit of energy in MeV.py",
                      "natural unit of energy.py",
                      "natural unit of length.py",
                      "natural unit of mass.py",
                      "natural unit of mom.um in MeVc.py",
                      "natural unit of mom.um.py",
                      "natural unit of time.py",
                      "natural unit of velocity.py",
                      "neutron Compton wavelength over 2 pi.py",
                      "neutron Compton wavelength.py",
                      "neutron g factor.py",
                      "neutron gyromag. ratio over 2 pi.py",
                      "neutron gyromag. ratio.py",
                      "neutron mag. mom. to Bohr magneton ratio.py",
                      "neutron mag. mom. to nuclear magneton ratio.py",
                      "neutron mag. mom.py",
                      "neutron mass energy equivalent in MeV.py",
                      "neutron mass energy equivalent.py",
                      "neutron mass in u.py",
                      "neutron mass.py",
                      "neutron molar mass.py",
                      "neutron to shielded proton mag. mom. ratio.py",
                      "neutron-electron mag. mom. ratio.py",
                      "neutron-electron mass ratio.py",
                      "neutron-muon mass ratio.py",
                      "neutron-proton mag. mom. ratio.py",
                      "neutron-proton mass difference energy equivalent in MeV.py",
                      "neutron-proton mass difference energy equivalent.py",
                      "neutron-proton mass difference in u.py",
                      "neutron-proton mass difference.py",
                      "neutron-proton mass ratio.py",
                      "neutron-tau mass ratio.py",
                      "nuclear magneton in KT.py",
                      "nuclear magneton in MHzT.py",
                      "nuclear magneton in eVT.py",
                      "nuclear magneton in inverse meters per tesla.py",
                      "nuclear magneton.py"
                    ]
                  ],
                  [
                    "Other",
                    [
                      "{220} lattice spacing of silicon.py"
                    ]
                  ],
                  [
                    "P",
                    [
                      "Planck constant in eV s.py",
                      "Planck constant over 2 pi in eV s.py",
                      "Planck constant over 2 pi times c in MeV fm.py",
                      "Planck constant over 2 pi.py",
                      "Planck constant.py",
                      "Planck length.py",
                      "Planck mass energy equivalent in GeV.py",
                      "Planck mass.py",
                      "Planck temperature.py",
                      "Planck time.py",
                      "proton Compton wavelength over 2 pi.py",
                      "proton Compton wavelength.py",
                      "proton charge to mass quotient.py",
                      "proton g factor.py",
                      "proton gyromag. ratio over 2 pi.py",
                      "proton gyromag. ratio.py",
                      "proton mag. mom. to Bohr magneton ratio.py",
                      "proton mag. mom. to nuclear magneton ratio.py",
                      "proton mag. mom.py",
                      "proton mag. shielding correction.py",
                      "proton mass energy equivalent in MeV.py",
                      "proton mass energy equivalent.py",
                      "proton mass in u.py",
                      "proton mass.py",
                      "proton molar mass.py",
                      "proton rms charge radius.py",
                      "proton-electron mass ratio.py",
                      "proton-muon mass ratio.py",
                      "proton-neutron mag. mom. ratio.py",
                      "proton-neutron mass ratio.py",
                      "proton-tau mass ratio.py"
                    ]
                  ],
                  [
                    "Q",
                    [
                      "quantum of circulation times 2.py",
                      "quantum of circulation.py"
                    ]
                  ],
                  [
                    "R",
                    [
                      "Rydberg constant times c in Hz.py",
                      "Rydberg constant times hc in J.py",
                      "Rydberg constant times hc in eV.py",
                      "Rydberg constant.py"
                    ]
                  ],
                  [
                    "S",
                    [
                      "Sackur-Tetrode constant (1 K, 100 kPa).py",
                      "Sackur-Tetrode constant (1 K, 101.325 kPa).py",
                      "Stefan-Boltzmann constant.py",
                      "second radiation constant.py",
                      "shielded helion gyromag. ratio over 2 pi.py",
                      "shielded helion gyromag. ratio.py",
                      "shielded helion mag. mom. to Bohr magneton ratio.py",
                      "shielded helion mag. mom. to nuclear magneton ratio.py",
                      "shielded helion mag. mom.py",
                      "shielded helion to proton mag. mom. ratio.py",
                      "shielded helion to shielded proton mag. mom. ratio.py",
                      "shielded proton gyromag. ratio over 2 pi.py",
                      "shielded proton gyromag. ratio.py",
                      "shielded proton mag. mom. to Bohr magneton ratio.py",
                      "shielded proton mag. mom. to nuclear magneton ratio.py",
                      "shielded proton mag. mom.py",
                      "speed of light in vacuum.py",
                      "standard acceleration of gravity.py",
                      "standard atmosphere.py",
                      "standard-state pressure.py"
                    ]
                  ],
                  [
                    "T",
                    [
                      "Thomson cross section.py",
                      "tau Compton wavelength over 2 pi.py",
                      "tau Compton wavelength.py",
                      "tau mass energy equivalent in MeV.py",
                      "tau mass energy equivalent.py",
                      "tau mass in u.py",
                      "tau mass.py",
                      "tau molar mass.py",
                      "tau-electron mass ratio.py",
                      "tau-muon mass ratio.py",
                      "tau-neutron mass ratio.py",
                      "tau-proton mass ratio.py",
                      "triton g factor.py",
                      "triton mag. mom. to Bohr magneton ratio.py",
                      "triton mag. mom. to nuclear magneton ratio.py",
                      "triton mag. mom.py",
                      "triton mass energy equivalent in MeV.py",
                      "triton mass energy equivalent.py",
                      "triton mass in u.py",
                      "triton mass.py",
                      "triton molar mass.py",
                      "triton-electron mass ratio.py",
                      "triton-proton mass ratio.py"
                    ]
                  ],
                  [
                    "U",
                    [
                      "unified atomic mass unit.py"
                    ]
                  ],
                  [
                    "V",
                    [
                      "von Klitzing constant.py"
                    ]
                  ],
                  [
                    "W",
                    [
                      "Wien frequency displacement law constant.py",
                      "Wien wavelength displacement law constant.py",
                      "weak mixing angle.py"
                    ]
                  ]
                ]
              ],
              [
                "Common physical constants",
                [
                  "Avogadro constant (N_mathrm{A}).py",
                  "Boltzmann constant (k_mathrm{B}).py",
                  "Electric constant (vacuum permittivity), (varepsilon_0).py",
                  "Electron mass (m_mathrm{e}).py",
                  "Elementary charge (e).py",
                  "Fine-structure constant (alpha).py",
                  "Magnetic constant (mu_0).py",
                  "Molar gas constant (R).py",
                  "Neutron mass (m_mathrm{n}).py",
                  "Newton's constant of gravitation (G_mathrm{N}).py",
                  "Planck's constant (h).py",
                  "Planck's reduced constant (hbar).py",
                  "Proton mass (m_mathrm{p}).py",
                  "Rydberg constant (R_infty).py",
                  "Speed of light in vacuum (c).py",
                  "Standard acceleration of gravity (g).py",
                  "Stefan-Boltzmann constant (sigma).py",
                  "Wien displacement law constant (b).py"
                ]
              ],
              [
                "Mathematical constants",
                [
                  "Geometric constant (pi).py",
                  "Golden ratio (phi).py"
                ]
              ],
              "Setup.py",
              [
                "Units",
                [
                  [
                    "Angle",
                    [
                      "Arc minute in radians.py",
                      "Arc second in radians.py",
                      "Degree in radians.py"
                    ]
                  ],
                  [
                    "Area",
                    [
                      "One acre in square meters.py",
                      "One hectare in square meters.py"
                    ]
                  ],
                  [
                    "Binary prefixes",
                    [
                      "exbi (2^{60}).py",
                      "gibi (2^{30}).py",
                      "kibi (2^{10}).py",
                      "mebi (2^{20}).py",
                      "pebi (2^{50}).py",
                      "tebi (2^{40}).py",
                      "yobi (2^{80}).py",
                      "zebi (2^{70}).py"
                    ]
                  ],
                  [
                    "Energy",
                    [
                      "One British thermal unit (International Steam Table) in Joules.py",
                      "One British thermal unit (thermochemical) in Joules.py",
                      "One calorie (International Steam Table calorie, 1956) in Joules.py",
                      "One calorie (thermochemical) in Joules.py",
                      "One electron volt in Joules.py",
                      "One erg in Joules.py",
                      "One ton of TNT in Joules.py"
                    ]
                  ],
                  [
                    "Force",
                    [
                      "One dyne in newtons.py",
                      "One kilogram force in newtons.py",
                      "One pound force in newtons.py"
                    ]
                  ],
                  [
                    "Length",
                    [
                      "One Angstrom in meters.py",
                      "One Fermi in meters.py",
                      "One astronomical unit in meters.py",
                      "One foot in meters.py",
                      "One inch in meters.py",
                      "One light year in meters.py",
                      "One micron in meters.py",
                      "One mil in meters.py",
                      "One mile in meters.py",
                      "One nautical mile in meters.py",
                      "One parsec in meters.py",
                      "One point in meters.py",
                      "One survey foot in meters.py",
                      "One survey mile in meters.py",
                      "One yard in meters.py"
                    ]
                  ],
                  [
                    "Optics",
                    [
                      "Convert optical frequency (nu) to wavelength (lambda).py",
                      "Convert wavelength (lambda) to optical frequency (nu).py"
                    ]
                  ],
                  [
                    "Power",
                    [
                      "One horsepower in watts.py"
                    ]
                  ],
                  [
                    "Pressure",
                    [
                      "One bar in pascals.py",
                      "One psi in pascals.py",
                      "One torr (mmHg) in pascals.py",
                      "Standard atmosphere in pascals.py"
                    ]
                  ],
                  [
                    "SI prefixes",
                    [
                      "atto (10^{\u221218}).py",
                      "centi (10^{\u22122}).py",
                      "deci (10^{\u22121}).py",
                      "deka (10^{1}).py",
                      "exa (10^{18}).py",
                      "femto (10^{\u221215}).py",
                      "giga (10^{9}).py",
                      "hecto (10^{2}).py",
                      "kilo (10^{3}).py",
                      "mega (10^{6}).py",
                      "micro (10^{\u22126}).py",
                      "milli (10^{\u22123}).py",
                      "nano (10^{\u22129}).py",
                      "peta (10^{15}).py",
                      "pico (10^{\u221212}).py",
                      "tera (10^{12}).py",
                      "yotta (10^{24}).py",
                      "zepto (10^{\u221221}).py",
                      "zetta (10^{21}).py"
                    ]
                  ],
                  [
                    "Speed",
                    [
                      "Kilometers per hour in meters per second.py",
                      "Miles per hour in meters per second.py",
                      "One Mach (approx., at 15 C, 1 atm) in meters per second.py",
                      "One knot in meters per second.py"
                    ]
                  ],
                  [
                    "Temperature",
                    [
                      "Convert Celsius to Fahrenheit.py",
                      "Convert Celsius to Kelvin.py",
                      "Convert Fahrenheit to Celsius.py",
                      "Convert Fahrenheit to Kelvin.py",
                      "Convert Kelvin to Celsius.py",
                      "Convert Kelvin to Fahrenheit.py",
                      "One Fahrenheit (only differences) in Kelvins.py",
                      "Zero of Celsius scale in Kelvin.py"
                    ]
                  ],
                  [
                    "Time",
                    [
                      "One Julian year (365.25 days) in seconds.py",
                      "One day in seconds.py",
                      "One hour in seconds.py",
                      "One minute in seconds.py",
                      "One week in seconds.py",
                      "One year (365 days) in seconds.py"
                    ]
                  ],
                  [
                    "Volume",
                    [
                      "One barrel in cubic meters.py",
                      "One fluid ounce (UK) in cubic meters.py",
                      "One fluid ounce (US) in cubic meters.py",
                      "One gallon (UK) in cubic meters.py",
                      "One gallon (US) in cubic meters.py",
                      "One liter in cubic meters.py"
                    ]
                  ],
                  [
                    "Weight",
                    [
                      "Atomic mass constant in kg.py",
                      "One Troy ounce in kg.py",
                      "One Troy pound in kg.py",
                      "One carat in kg.py",
                      "One grain in kg.py",
                      "One gram in kg.py",
                      "One long ton in kg.py",
                      "One metric ton in kg ((10^{3})).py",
                      "One ounce in kg.py",
                      "One pound (avoirdupois) in kg.py",
                      "One short ton in kg.py",
                      "One stone in kg.py"
                    ]
                  ]
                ]
              ]
            ]
          ],
          "Setup.py",
          [
            "Special functions",
            [
              [
                "Airy functions",
                [
                  "ai_zeros Compute $n$ zeros $a$ and $a'$ of $mathrm{Ai}(x)$ and $mathrm{Ai}'(x)$, and $mathrm{Ai}(a')$ and $mathrm{Ai}'(a)$.py",
                  "airy Airy functions and their derivatives.py",
                  "airye Exponentially scaled Airy functions and their derivatives.py",
                  "bi_zeros Compute $n$ zeros $b$ and $b'$ of $mathrm{Bi}(x)$ and $mathrm{Bi}'(x)$, and $mathrm{Bi}(b')$ and $mathrm{Bi}'(b)$.py"
                ]
              ],
              [
                "Bessel Functions",
                [
                  [
                    "Bessel Functions",
                    [
                      "hankel1 Hankel function of the first kind, $H^{(1)}_v(z)$.py",
                      "hankel1e Exponentially scaled Hankel function of the first kind, $H^{(1)}_v(z), e^{-i, z}$.py",
                      "hankel2 Hankel function of the second kind, $H^{(2)}_v(z)$.py",
                      "hankel2e Exponentially scaled Hankel function of the second kind, $H^{(2)}_v(z), e^{i, z}$.py",
                      "iv Modified Bessel function of the first kind of real order $v$, $I_v(z)$.py",
                      "ive Exponentially scaled modified Bessel function of the first kind of real order $v$, $I_v(z), e^{-Re{z}}$.py",
                      "jv Bessel function of the first kind of real order $v$, $J_v(z)$.py",
                      "jve Exponentially scaled Bessel function of the first kind of order $v$, $J_v(z), e^{-Im{z}}$.py",
                      "kn Modified Bessel function of the second kind of integer order $n$, $K_n(x)$.py",
                      "kv Modified Bessel function of the second kind of real order $v$, $K_v(z)$.py",
                      "kve Exponentially scaled modified Bessel function of the second kind, $K_v(z), e^{z}$.py",
                      "lmbda Compute sequence of lambda functions with arbitrary order $v$ and their derivatives.py",
                      "yn Bessel function of the second kind of integer order $n$, $Y_n(x)$.py",
                      "yv Bessel function of the second kind of real order $v$, $Y_v(z)$.py",
                      "yve Exponentially scaled Bessel function of the second kind of real order, $Y_v(z), e^{-Im{z}}$.py"
                    ]
                  ],
                  [
                    "Derivatives of Bessel Functions",
                    [
                      "h1vp Return the $n$th derivative of $H^{(1)}_v(z)$ with respect to $z$.py",
                      "h2vp Return the $n$th derivative of $H^{(2)}_v(z)$ with respect to z.py",
                      "ivp Return the $n$th derivative of $I_v(z)$ with respect to $z$.py",
                      "jvp Return the $n$th derivative of $J_v(z)$ with respect to $z$.py",
                      "kvp Return the $n$th derivative of $K_v(z)$ with respect to $z$.py",
                      "yvp Return the $n$th derivative of $Y_v(z)$ with respect to $z$.py"
                    ]
                  ],
                  [
                    "Faster versions of common Bessel Functions",
                    [
                      "i0 Modified Bessel function of order 0, $I_0(x)$.py",
                      "i0e Exponentially scaled modified Bessel function of order 0, $I_0(x), e^{-x}$.py",
                      "i1 Modified Bessel function of order 1, $I_1(x)$.py",
                      "i1e Exponentially scaled modified Bessel function of order 1, $I_1(x), e^{-x}$.py",
                      "j0 Bessel function the first kind of order 0, $J_0(x)$.py",
                      "j1 Bessel function of the first kind of order 1, $J_1(x)$.py",
                      "k0 Modified Bessel function K of order 0, $K_0(x)$.py",
                      "k0e Exponentially scaled modified Bessel function K of order 0, $K_0(x), e^{x}$.py",
                      "k1 Modified Bessel function of the first kind of order 1, $K_1(x)$.py",
                      "k1e Exponentially scaled modified Bessel function K of order 1, $K_1(x), e^{x}$.py",
                      "y0 Bessel function of the second kind of order 0, $Y_0(x)$.py",
                      "y1 Bessel function of the second kind of order 1, $Y_1(x)$.py"
                    ]
                  ],
                  [
                    "Integrals of Bessel Functions",
                    [
                      "besselpoly Weighted integral of a Bessel function, $int_0^1 x^lambda J_nu(2 a x) , dx$.py",
                      "it2i0k0 Integrals related to modified Bessel functions of order 0 $int_0^x frac{I_0(t)-1}{t}, dt$, $int_x^infty frac{K_0(t)}{t}, dt$.py",
                      "it2j0y0 Integrals related to Bessel functions of order 0 $int_0^x frac{1-J_0(t)}{t}, dt$, $int_x^infty frac{Y_0(t)}{t}, dt$.py",
                      "iti0k0 Integrals of modified Bessel functions of order 0 $int_0^x I_0(t), dt$, $int_0^x K_0(t), dt$.py",
                      "itj0y0 Integrals of Bessel functions of order 0 $int_0^x J_0(t), dt$, $int_0^x Y_0(t), dt$.py"
                    ]
                  ],
                  [
                    "Riccati-Bessel Functions",
                    [
                      "riccati_jn Compute the Ricatti-Bessel function of the first kind and its derivative for all orders up to and including n.py",
                      "riccati_yn Compute the Ricatti-Bessel function of the second kind and its derivative for all orders up to and including n.py"
                    ]
                  ],
                  [
                    "Spherical Bessel Functions",
                    [
                      "sph_in Compute the spherical Bessel function $i_n(z)$ and its derivative for all orders up to and including $n$.py",
                      "sph_inkn Compute the spherical Bessel functions, $i_n(z)$ and $k_n(z)$ and their derivatives for all orders up to and including $n$.py",
                      "sph_jn Compute the spherical Bessel function $j_n(z)$ and its derivative for all orders up to and including $n$.py",
                      "sph_jnyn Compute the spherical Bessel functions, $j_n(z)$ and $y_n(z)$ and their derivatives for all orders up to and including $n$.py",
                      "sph_kn Compute the spherical Bessel function $k_n(z)$ and its derivative for all orders up to and including $n$.py",
                      "sph_yn Compute the spherical Bessel function $y_n(z)$ and its derivative for all orders up to and including $n$.py"
                    ]
                  ],
                  [
                    "Zeros of Bessel Functions",
                    [
                      "jn_zeros Compute nt zeros of the Bessel function $J_n(x)$.py",
                      "jnjnp_zeros Compute nt (=1200) zeros of the Bessel functions $J_n$ and $J_n'$ and arange them in order of their magnitudes.py",
                      "jnp_zeros Compute nt zeros of the Bessel function $J_n'(x)$.py",
                      "jnyn_zeros Compute nt zeros of the Bessel functions $J_n(x)$, $J_n'(x)$, $Y_n(x)$, and $Y_n'(x)$, respectively.py",
                      "y0_zeros Returns nt (complex or real) zeros of $Y_0(z)$, $z_0$, and the value of $Y_0'(z_0) = -Y_1(z_0)$ at each zero.py",
                      "y1_zeros Returns nt (complex or real) zeros of $Y_1(z)$, $z_1$, and the value of $Y_1'(z_1) = Y_0(z_1)$ at each zero.py",
                      "y1p_zeros Returns nt (complex or real) zeros of $Y_1'(z)$, $z_1'$, and the value of $Y_1(z_1')$ at each zero.py",
                      "yn_zeros Compute nt zeros of the Bessel function $Y_n(x)$.py",
                      "ynp_zeros Compute nt zeros of the Bessel function $Y_n'(x)$.py"
                    ]
                  ]
                ]
              ],
              [
                "Combinatorics",
                [
                  "comb The number of combinations of N things taken k at a time.py",
                  "perm Permutations of N things taken k at a time, i.e., k-permutations of N.py"
                ]
              ],
              [
                "Convenience Functions",
                [
                  "cbrt $sqrt[3]{x}$.py",
                  "cosdg Cosine of the angle given in degrees.py",
                  "cosm1 $cos(x) - 1$ for use when $x$ is near zero.py",
                  "cotdg Cotangent of the angle given in degrees.py",
                  "exp10 $10^x$.py",
                  "exp2 $2^x$.py",
                  "expm1 $exp(x) - 1$ for use when $x$ is near zero.py",
                  "log1p Calculates $log(1+x)$ for use when $x$ is near zero.py",
                  "radian Convert from degrees to radians.py",
                  "round Round to nearest integer.py",
                  "sindg Sine of angle given in degrees.py",
                  "tandg Tangent of angle given in degrees.py",
                  "xlog1py Compute $x, log(1+y)$ so that the result is 0 if $x$ = 0.py",
                  "xlogy Compute $x, log(y)$ so that the result is 0 if $x$ = 0.py"
                ]
              ],
              [
                "Ellipsoidal Harmonics",
                [
                  "ellip_harm Ellipsoidal harmonic functions $E^p_n(l)$.py",
                  "ellip_harm_2 Ellipsoidal harmonic functions $F^p_n(l)$.py",
                  "ellip_normal Ellipsoidal harmonic normalization constants $gamma^p_n$.py"
                ]
              ],
              [
                "Elliptic Functions",
                [
                  "ellipe Complete elliptic integral of the second kind.py",
                  "ellipeinc Incomplete elliptic integral of the second kind.py",
                  "ellipj Jacobian elliptic functions.py",
                  "ellipk Computes the complete elliptic integral of the first kind.py",
                  "ellipkinc Incomplete elliptic integral of the first kind.py",
                  "ellipkm1 The complete elliptic integral of the first kind around m=1.py"
                ]
              ],
              [
                "Error Function and Fresnel Integrals",
                [
                  "dawsn Dawson\u2019s integral.py",
                  "erf Returns the error function of complex argument.py",
                  "erf_zeros Compute nt complex zeros of the error function erf(z).py",
                  "erfc Complementary error function, $1 - mathrm{erf}(x)$.py",
                  "erfcinv Inverse function for erfc.py",
                  "erfcx Scaled complementary error function, $exp(x^2), mathrm{erfc}(x)$.py",
                  "erfi Imaginary error function, $-i, mathrm{erf}(i, z)$.py",
                  "erfinv Inverse function for erf.py",
                  "fresnel Fresnel sin and cos integrals.py",
                  "fresnel_zeros Compute nt complex zeros of the sine and cosine Fresnel integrals S(z) and C(z).py",
                  "fresnelc_zeros Compute nt complex zeros of the cosine Fresnel integral C(z).py",
                  "fresnels_zeros Compute nt complex zeros of the sine Fresnel integral S(z).py",
                  "modfresnelm Modified Fresnel negative integrals.py",
                  "modfresnelp Modified Fresnel positive integrals.py",
                  "wofz Faddeeva function.py"
                ]
              ],
              [
                "Gamma and Related Functions",
                [
                  "beta Beta function.py",
                  "betainc Incomplete beta integral.py",
                  "betaincinv Inverse function to beta integral.py",
                  "betaln Natural logarithm of absolute value of beta function.py",
                  "digamma Digamma function.py",
                  "gamma Gamma function.py",
                  "gammainc Incomplete gamma function.py",
                  "gammaincc Complemented incomplete gamma integral.py",
                  "gammainccinv Inverse to gammaincc.py",
                  "gammaincinv Inverse to gammainc.py",
                  "gammaln Logarithm of absolute value of gamma function.py",
                  "gammasgn Sign of the gamma function.py",
                  "multigammaln Returns the log of multivariate gamma, also sometimes called the generalized gamma.py",
                  "polygamma Polygamma function which is the $n$th derivative of the digamma (psi) function.py",
                  "psi Digamma function.py",
                  "rgamma Gamma function inverted.py"
                ]
              ],
              [
                "Hypergeometric Functions",
                [
                  "hyp0f1 Confluent hypergeometric limit function ${}_0F_1$.py",
                  "hyp1f1 Confluent hypergeometric function ${}_1F_1(a, b; x)$.py",
                  "hyp1f2 Hypergeometric function ${}_1F_2$ and error estimate.py",
                  "hyp2f0 Hypergeometric function ${}_2F_0$ in $y$ and an error estimate.py",
                  "hyp2f1 Gauss hypergeometric function ${}_2F_1(a, b; c; z)$.py",
                  "hyp3f0 Hypergeometric function ${}_3F_0$ in $y$ and an error estimate.py",
                  "hyperu Confluent hypergeometric function $U(a, b, x)$ of the second kind.py"
                ]
              ],
              [
                "Information Theory Functions",
                [
                  "entr Elementwise function for computing entropy.py",
                  "huber Huber loss function.py",
                  "kl_div Elementwise function for computing Kullback-Leibler divergence.py",
                  "pseudo_huber Pseudo-Huber loss function.py",
                  "rel_entr Elementwise function for computing relative entropy.py"
                ]
              ],
              [
                "Kelvin Functions",
                [
                  "bei Kelvin function bei.py",
                  "bei_zeros Compute nt zeros of the Kelvin function bei x.py",
                  "beip Derivative of the Kelvin function bei.py",
                  "beip_zeros Compute nt zeros of the Kelvin function bei\u2019 x.py",
                  "ber Kelvin function ber.py",
                  "ber_zeros Compute nt zeros of the Kelvin function ber x.py",
                  "berp Derivative of the Kelvin function ber.py",
                  "berp_zeros Compute nt zeros of the Kelvin function ber\u2019 x.py",
                  "kei Kelvin function ker.py",
                  "kei_zeros Compute nt zeros of the Kelvin function kei x.py",
                  "keip Derivative of the Kelvin function kei.py",
                  "keip_zeros Compute nt zeros of the Kelvin function kei\u2019 x.py",
                  "kelvin Kelvin functions as complex numbers.py",
                  "kelvin_zeros Compute nt zeros of all the Kelvin functions returned in a length 8 tuple of arrays of length nt.py",
                  "ker Kelvin function ker.py",
                  "ker_zeros Compute nt zeros of the Kelvin function ker x.py",
                  "kerp Derivative of the Kelvin function ker.py",
                  "kerp_zeros Compute nt zeros of the Kelvin function ker\u2019 x.py"
                ]
              ],
              [
                "Legendre Functions",
                [
                  "clpmn Associated Legendre function of the first kind, $P_{m,n}(z)$.py",
                  "lpmn Associated Legendre function of the first kind, $P_{m,n}(z)$.py",
                  "lpmv Associated legendre function of integer order.py",
                  "lpn Compute sequence of Legendre functions of the first kind (polynomials), $P_n(z)$ and derivatives for all degrees from 0 to $n$ (inclusive).py",
                  "lqmn Associated Legendre functions of the second kind, $Q_{m,n}(z)$ and its derivative, $Q_{m,n}'(z)$ of order $m$ and degree $n$.py",
                  "lqn Compute sequence of Legendre functions of the second kind, $Q_n(z)$ and derivatives for all degrees from 0 to $n$ (inclusive).py",
                  "sph_harm Spherical harmonic of degree $n geq 0$ and order $m leq n$.py"
                ]
              ],
              [
                "Mathieu and Related Functions",
                [
                  "mathieu_a Characteristic value of even Mathieu functions.py",
                  "mathieu_b Characteristic value of odd Mathieu functions.py",
                  "mathieu_cem Even Mathieu function and its derivative.py",
                  "mathieu_even_coef Compute expansion coefficients for even Mathieu functions and modified Mathieu functions.py",
                  "mathieu_modcem1 Even modified Mathieu function of the first kind and its derivative.py",
                  "mathieu_modcem2 Even modified Mathieu function of the second kind and its derivative.py",
                  "mathieu_modsem1 Odd modified Mathieu function of the first kind and its derivative.py",
                  "mathieu_modsem2 Odd modified Mathieu function of the second kind and its derivative.py",
                  "mathieu_odd_coef Compute expansion coefficients for even Mathieu functions and modified Mathieu functions.py",
                  "mathieu_sem Odd Mathieu function and its derivative.py"
                ]
              ],
              [
                "Orthogonal polynomials",
                [
                  "assoc_laguerre Returns the $n$th order generalized (associated) Laguerre polynomial.py",
                  "chebyc Coefficients of the $n$th order Chebyshev polynomial of first kind, $C_n(x)$.py",
                  "chebys Coefficients of the $n$th order Chebyshev polynomial of second kind, $S_n$(x).py",
                  "chebyt Coefficients of the $n$th order Chebyshev polynomial of first kind, $T_n(x)$.py",
                  "chebyu Coefficients of the $n$th order Chebyshev polynomial of second kind, $U_n(x)$.py",
                  "eval_chebyc Evaluate Chebyshev $C$ polynomial at a point.py",
                  "eval_chebys Evaluate Chebyshev $S$ polynomial at a point.py",
                  "eval_chebyt Evaluate Chebyshev $T$ polynomial at a point.py",
                  "eval_chebyu Evaluate Chebyshev $U$ polynomial at a point.py",
                  "eval_gegenbauer Evaluate Gegenbauer polynomial at a point.py",
                  "eval_genlaguerre Evaluate generalized Laguerre polynomial at a point.py",
                  "eval_hermite Evaluate Hermite polynomial at a point.py",
                  "eval_hermitenorm Evaluate normalized Hermite polynomial at a point.py",
                  "eval_jacobi Evaluate Jacobi polynomial at a point.py",
                  "eval_laguerre Evaluate Laguerre polynomial at a point.py",
                  "eval_legendre Evaluate Legendre polynomial at a point.py",
                  "eval_sh_chebyt Evaluate shifted Chebyshev $T$ polynomial at a point.py",
                  "eval_sh_chebyu Evaluate shifted Chebyshev $U$ polynomial at a point.py",
                  "eval_sh_jacobi Evaluate shifted Jacobi polynomial at a point.py",
                  "eval_sh_legendre Evaluate shifted Legendre polynomial at a point.py",
                  "gegenbauer Coefficients of the $n$th order Gegenbauer (ultraspherical) polynomial,.py",
                  "genlaguerre Coefficients of the $n$th order generalized (associated) Laguerre polynomial,.py",
                  "hermite Coefficients of the $n$th order Hermite polynomial, $H_n(x)$, orthogonal over.py",
                  "hermitenorm Coefficients of the $n$th order normalized Hermite polynomial, $He_n(x)$, orthogonal.py",
                  "jacobi Coefficients of the $n$th order Jacobi polynomial, $P^(alpha,beta)_n(x)$ orthogonal over [-1,1] with weighting function $(1-x)^alpha (1+x)^beta$ with $alpha,beta  -1$.py",
                  "laguerre Coefficients of the $n$th order Laguerre polynoimal, $L_n(x)$.py",
                  "legendre Coefficients of the $n$th order Legendre polynomial, $P_n(x)$.py",
                  "sh_chebyt Coefficients of $n$th order shifted Chebyshev polynomial of first kind, $T_n(x)$.py",
                  "sh_chebyu Coefficients of the $n$th order shifted Chebyshev polynomial of second kind, $U_n(x)$.py",
                  "sh_jacobi Coefficients of the $n$th order Jacobi polynomial, $G_n(p,q,x)$ orthogonal over [0,1] with weighting function $(1-x)^{p-q} x^{q-1}$ with $pq-1$ and $q  0$.py",
                  "sh_legendre Coefficients of the $n$th order shifted Legendre polynomial, $P^ast_n(x)$.py"
                ]
              ],
              [
                "Other Special Functions",
                [
                  "agm Arithmetic, Geometric Mean.py",
                  "bernoulli Return an array of the Bernoulli numbers $B_0$, ..., $B_n$ (inclusive).py",
                  "binom Binomial coefficient.py",
                  "diric Returns the periodic sinc function, also called the Dirichlet function.py",
                  "euler Return an array of the Euler numbers $E_0$, ..., $E_n$ (inclusive).py",
                  "exp1 Exponential integral $E_1$ of complex argument $z$.py",
                  "expi Exponential integral $mathrm{Ei}$.py",
                  "expn Exponential integral $E_n$.py",
                  "factorial The factorial function, $n! = Gamma(n+1)$.py",
                  "factorial2 Double factorial $n!!$.py",
                  "factorialk $n(!!...!)$ = multifactorial of order $k$.py",
                  "lambertw Lambert $W$ function [R497].py",
                  "shichi Hyperbolic sine and cosine integrals.py",
                  "sici Sine and cosine integrals.py",
                  "spence Dilogarithm integral.py",
                  "zeta Hurwitz $zeta$ function.py",
                  "zetac Riemann $zeta$ function minus 1.py"
                ]
              ],
              [
                "Parabolic Cylinder Functions",
                [
                  "pbdn_seq $D_0(x), ..., D_n(x)$ and $D_0'(x), ..., D_n'(x)$.py",
                  "pbdv Parabolic cylinder function $D$.py",
                  "pbdv_seq $D_{v_0}(x), ..., D_v(x)$ and $D_{v_0}'(x), ..., D_v'(x)$ with $v_0=v-lfloor v rfloor$.py",
                  "pbvv Parabolic cylinder function $V$.py",
                  "pbvv_seq $V_{v_0}(x), ..., V_v(x)$ and $V_{v_0}'(x), ..., V_v'(x)$ with $v_0=v-lfloor v rfloor$.py",
                  "pbwa Parabolic cylinder function $W$.py"
                ]
              ],
              "Setup.py",
              [
                "Spheroidal Wave Functions",
                [
                  "obl_ang1 Oblate spheroidal angular function of the first kind and its derivative.py",
                  "obl_ang1_cv Oblate spheroidal angular function obl_ang1 for precomputed characteristic value.py",
                  "obl_cv Characteristic value of oblate spheroidal function.py",
                  "obl_cv_seq Compute a sequence of characteristic values for the oblate spheroidal wave functions for mode m and n\u2019=m..n and spheroidal parameter c.py",
                  "obl_rad1 Oblate spheroidal radial function of the first kind and its derivative.py",
                  "obl_rad1_cv Oblate spheroidal radial function obl_rad1 for precomputed characteristic value.py",
                  "obl_rad2 Oblate spheroidal radial function of the second kind and its derivative.py",
                  "obl_rad2_cv Oblate spheroidal radial function obl_rad2 for precomputed characteristic value.py",
                  "pro_ang1 Prolate spheroidal angular function of the first kind and its derivative.py",
                  "pro_ang1_cv Prolate spheroidal angular function pro_ang1 for precomputed characteristic value.py",
                  "pro_cv Characteristic value of prolate spheroidal function.py",
                  "pro_cv_seq Compute a sequence of characteristic values for the prolate spheroidal wave functions for mode m and n\u2019=m..n and spheroidal parameter c.py",
                  "pro_rad1 Prolate spheroidal radial function of the first kind and its derivative.py",
                  "pro_rad1_cv Prolate spheroidal radial function pro_rad1 for precomputed characteristic value.py",
                  "pro_rad2 Prolate spheroidal radial function of the secon kind and its derivative.py",
                  "pro_rad2_cv Prolate spheroidal radial function pro_rad2 for precomputed characteristic value.py"
                ]
              ],
              [
                "Statistical Functions (see also scipy.stats)",
                [
                  "bdtr Binomial distribution cumulative distribution function.py",
                  "bdtrc Binomial distribution survival function.py",
                  "bdtri Inverse function to bdtr vs.py",
                  "boxcox Compute the Box-Cox transformation.py",
                  "boxcox1p Compute the Box-Cox transformation of 1 + x.py",
                  "btdtr Cumulative beta distribution.py",
                  "btdtri p-th quantile of the beta distribution.py",
                  "chdtr Chi square cumulative distribution function.py",
                  "chdtrc Chi square survival function.py",
                  "chdtri Inverse to chdtrc.py",
                  "expit Expit ufunc for ndarrays.py",
                  "fdtr F cumulative distribution function.py",
                  "fdtrc F survival function.py",
                  "fdtri Inverse to fdtr vs x.py",
                  "gdtr Gamma distribution cumulative density function.py",
                  "gdtrc Gamma distribution survival function.py",
                  "gdtria Inverse of gdtr vs a.py",
                  "gdtrib Inverse of gdtr vs b.py",
                  "gdtrix Inverse of gdtr vs x.py",
                  "kolmogi Inverse function to kolmogorov.py",
                  "kolmogorov Complementary cumulative distribution function of Kolmogorov distribution.py",
                  "logit Logit ufunc for ndarrays.py",
                  "nbdtr Negative binomial cumulative distribution function.py",
                  "nbdtrc Negative binomial survival function.py",
                  "nbdtri Inverse of nbdtr vs p.py",
                  "ncfdtr Cumulative distribution function of the non-central $F$ distribution.py",
                  "ncfdtri Inverse cumulative distribution function of the non-central $F$ distribution.py",
                  "ncfdtridfd Calculate degrees of freedom (denominator) for the noncentral $F$ distribution.py",
                  "ncfdtridfn Calculate degrees of freedom (numerator) for the noncentral $F$ distribution.py",
                  "ncfdtrinc Calculate non-centrality parameter for non-central $F$ distribution.py",
                  "nctdtr Cumulative distribution function of the non-central $t$ distribution.py",
                  "nctdtridf Calculate degrees of freedom for non-central $t$ distribution.py",
                  "nctdtrinc Calculate non-centrality parameter for non-central $t$ distribution.py",
                  "nctdtrit Inverse cumulative distribution function of the non-central $t$ distribution.py",
                  "ndtr Gaussian cumulative distribution function.py",
                  "ndtri Inverse of ndtr vs x.py",
                  "nrdtrimn Calculate mean of normal distribution given other params.py",
                  "nrdtrisd Calculate standard deviation of normal distribution given other params.py",
                  "pdtr Poisson cumulative distribution function.py",
                  "pdtrc Poisson survival function.py",
                  "pdtri Inverse to pdtr vs m.py",
                  "smirnov Kolmogorov-Smirnov complementary cumulative distribution function.py",
                  "smirnovi Inverse to smirnov.py",
                  "stdtr Student $t$ distribution cumulative density function.py",
                  "stdtridf Inverse of stdtr vs df.py",
                  "stdtrit Inverse of stdtr vs t.py",
                  "tklmbda Tukey-Lambda cumulative distribution function.py"
                ]
              ],
              [
                "Struve Functions",
                [
                  "it2struve0 Integral related to Struve function of order 0.py",
                  "itmodstruve0 Integral of the modified Struve function of order 0.py",
                  "itstruve0 Integral of the Struve function of order 0.py",
                  "modstruve Modified Struve function.py",
                  "struve Struve function.py"
                ]
              ]
            ]
          ],
          [
            "Statistical distributions and functions",
            [
              "Setup.py"
            ]
          ]
        ]
      ],
      [
        "SymPy",
        [
          [
            "Calculus",
            [
              "Definite integral.py",
              "Differentiate multiple times.py",
              "Differentiate once.py",
              "Double integral.py",
              "Finite differences.py",
              "Indefinite integral.py",
              "Limits.py",
              "Mixed partial derivatives.py",
              "Series expansion, removing order term.py",
              "Series expansion.py",
              "Summations.py"
            ]
          ],
          [
            "Constants",
            [
              "1.py",
              "12.py",
              "Base of natural logarithm, (e).py",
              "Catalan's constant, (K).py",
              "Complex infinity, (tilde{infty}).py",
              "Euler-Mascheroni constant, (gamma).py",
              "Geometric constant, (pi).py",
              "Golden ratio, (phi).py",
              "Infinity, (infty).py",
              "NaN.py",
              "Rational numbers.py",
              "Unit imaginary number, (i).py"
            ]
          ],
          [
            "Functions",
            [
              [
                "Combinatorial functions",
                [
                  "Bell number.py",
                  "Bell polynomial of the second kind.py",
                  "Bell polynomial.py",
                  "Bernoulli number.py",
                  "Bernoulli polynomial.py",
                  "Binomial coefficient (nCk).py",
                  "Catalan number.py",
                  "Double factorial.py",
                  "Euler number.py",
                  "Factorial.py",
                  "Falling factorial.py",
                  "Fibonacci number.py",
                  "Fibonacci polynomial.py",
                  "Generalized harmonic number.py",
                  "Harmonic number.py",
                  "Lucas number.py",
                  "Number of combinations of length k among n items.py",
                  "Number of partitions of length k among n items.py",
                  "Number of permutations of length k among n items.py",
                  "Reduced Stirling number of the second kind.py",
                  "Rising factorial.py",
                  "Stirling number of the first kind.py",
                  "Stirling number of the second kind.py"
                ]
              ],
              [
                "Elementary functions",
                [
                  "Abs.py",
                  "Identity function.py",
                  "Lambert W (a.k.a. product logarithm).py",
                  "Max.py",
                  "Min.py",
                  "Piecewise.py",
                  "Product logarithm.py",
                  "acos.py",
                  "acosh.py",
                  "acot.py",
                  "acoth.py",
                  "arg.py",
                  "asin.py",
                  "asinh.py",
                  "atan.py",
                  "atan2.py",
                  "atanh.py",
                  "ceiling.py",
                  "conjugate.py",
                  "cos.py",
                  "cosh.py",
                  "cot.py",
                  "coth.py",
                  "exp.py",
                  "floor.py",
                  "im.py",
                  "log.py",
                  "re.py",
                  "root.py",
                  "sign.py",
                  "sin.py",
                  "sinh.py",
                  "sqrt.py",
                  "tan.py",
                  "tanh.py"
                ]
              ],
              [
                "Special functions",
                [
                  [
                    "Airy Functions",
                    [
                      "Airy function of the first kind.py",
                      "Airy function of the second kind.py",
                      "Derivative of the Airy function of the first kind.py",
                      "Derivative of the Airy function of the second kind.py"
                    ]
                  ],
                  [
                    "B-Splines",
                    [
                      "The B-splines at x of degree d with given knots.py",
                      "The n-th B-spline at x of degree d with given knots.py"
                    ]
                  ],
                  [
                    "Bessel Type Functions",
                    [
                      "Bessel function of the first kind.py",
                      "Bessel function of the second kind.py",
                      "Hankel function of the first kind.py",
                      "Hankel function of the second kind.py",
                      "Modified Bessel function of the first kind.py",
                      "Modified Bessel function of the second kind.py",
                      "Spherical Bessel function of the first kind.py",
                      "Spherical Bessel function of the second kind.py",
                      "Zeros of the spherical Bessel function of the first kind.py"
                    ]
                  ],
                  "Derivative of Dirac delta function.py",
                  "Dirac delta function.py",
                  [
                    "Elliptic integrals",
                    [
                      "Complete elliptic integral of the first kind.py",
                      "Legendre incomplete elliptic integral of the first kind.py",
                      "Legendre incomplete elliptic integral of the second kind.py",
                      "Legendre incomplete elliptic integral of the third kind.py"
                    ]
                  ],
                  [
                    "Error Functions and Fresnel Integrals",
                    [
                      "Complementary error function.py",
                      "Fresnel integral C.py",
                      "Fresnel integral S.py",
                      "Gauss error function.py",
                      "Imaginary error function.py",
                      "Inverse complementary error function.py",
                      "Inverse error function.py",
                      "Inverse two-argument error function.py",
                      "Two-argument error function.py"
                    ]
                  ],
                  [
                    "Exponential, Logarithmic and Trigonometric Integrals",
                    [
                      "Classical logarithmic integral.py",
                      "Cosine integral.py",
                      "Exponential integral.py",
                      "Generalised exponential integral.py",
                      "Hyperbolic cosine integral.py",
                      "Hyperbolic sine integral.py",
                      "Offset logarithmic integral.py",
                      "Sine integral.py",
                      "Special case of the generalised exponential integral.py"
                    ]
                  ],
                  [
                    "Gamma, Beta and related Functions",
                    [
                      "Digamma function.py",
                      "Euler Beta function.py",
                      "Gamma function.py",
                      "Log Gamma function.py",
                      "Lower incomplete gamma function.py",
                      "Polygamma function.py",
                      "Trigamma function.py",
                      "Upper incomplete gamma function.py"
                    ]
                  ],
                  "Heaviside function.py",
                  [
                    "Hypergeometric Functions",
                    [
                      "Generalized hypergeometric function.py",
                      "Meijer G-function.py"
                    ]
                  ],
                  [
                    "Orthogonal Polynomials",
                    [
                      "Associated Legendre polynomial.py",
                      "Chebyshev polynomial of the first kind.py",
                      "Chebyshev polynomial of the second kind.py",
                      "Gegenbauer polynomial.py",
                      "Generalized (associated) Laguerre polynomial.py",
                      "Hermite polynomial.py",
                      "Jacobi polynomial.py",
                      "Laguerre polynomial.py",
                      "Legendre polynomial.py",
                      "Normalized Jacobi polynomial.py",
                      "Root k of the nth Chebyshev polynomial of the first kind.py",
                      "Root k of the nth Chebyshev polynomial of the second kind.py"
                    ]
                  ],
                  [
                    "Riemann Zeta and Related Functions",
                    [
                      "Dirichlet eta function.py",
                      "Hurwitz zeta function.py",
                      "Lerch transcendent (Lerch phi function).py",
                      "Polylogarithm function.py",
                      "Riemann zeta function.py"
                    ]
                  ],
                  [
                    "Spherical Harmonics",
                    [
                      "Conjugate spherical harmonics.py",
                      "Real spherical harmonics.py",
                      "Spherical harmonics.py"
                    ]
                  ],
                  [
                    "Tensor Functions",
                    [
                      "Kronecker delta.py",
                      "Levi-Civita symbol.py"
                    ]
                  ]
                ]
              ]
            ]
          ],
          [
            "Manipulating expressions",
            [
              [
                "Collect terms",
                [
                  "Collect and apply function to each coefficient.py",
                  "Collect as coefficients of multiple factors.py",
                  "Collect as coefficients of one factor.py",
                  "Collect constants.py",
                  "Collect with respect to wild card.py",
                  "Recursively collect.py"
                ]
              ],
              [
                "Evaluation",
                [
                  "Create numpy function for efficient evaluation.py",
                  "Evaluate numerically to arbitrary precision.py",
                  "Evaluate numerically to python float.py"
                ]
              ],
              [
                "Expansion",
                [
                  "Expand basic expressions.py",
                  "Expand only addition in exponents.py",
                  "Expand only functions.py",
                  "Expand only hypergeometric functions.py",
                  "Expand only logarithms.py",
                  "Expand only multinomials.py",
                  "Expand only multiplication over addition.py",
                  "Expand only powers of multiplied bases.py",
                  "Expand only real and imaginary parts.py",
                  "Expand only trig.py",
                  "Expand, including complex parts.py",
                  "Expand, including functions.py",
                  "Expand, including trig.py"
                ]
              ],
              [
                "Exponentials and Logarithms",
                [
                  "Combine exponentials.py",
                  "Combine logarithms for general arguments.py",
                  "Combine logarithms, forcing assumptions.py",
                  "Expand logarithms for general arguments.py",
                  "Expand logarithms, forcing assumptions.py",
                  "Simplification, possibly to trig functions.py"
                ]
              ],
              [
                "Miscellaneous",
                [
                  "Expand gamma functions.py",
                  "Simplify Bessel functions.py",
                  "Simplify binomials.py",
                  "Simplify factorials.py",
                  "Simplify numerical expressions to exact values.py"
                ]
              ],
              [
                "Polynomials",
                [
                  "Collect common powers of a term.py",
                  "Extract coefficient of a term.py",
                  "Factor polynomial over rationals.py"
                ]
              ],
              [
                "Powers",
                [
                  "Collect exponents on powers for general arguments.py",
                  "Collect exponents on powers, forcing assumptions and polar simplifications.py",
                  "Collect exponents on powers, forcing assumptions.py",
                  "Denest square-roots.py",
                  "Expand powers by exponent for general arguments.py",
                  "Expand powers of multiplied bases, forcing assumptions.py",
                  "Simplify powers for general arguments.py",
                  "Simplify powers, forcing assumptions.py"
                ]
              ],
              [
                "Rational functions",
                [
                  "Cancel.py",
                  "Decompose into partial fractions.py",
                  "Join over common denominator.py",
                  "Remove square roots from denominator.py"
                ]
              ],
              [
                "Refine, using assumptions",
                [
                  [
                    "List of assumptions",
                    [
                      "Algebraic.py",
                      "Antihermitian.py",
                      "Bounded.py",
                      "Commutative.py",
                      "Complex.py",
                      "Composite.py",
                      "Even.py",
                      "Extended real.py",
                      "Finite.py",
                      "Hermitian.py",
                      "Imaginary.py",
                      "Infinite.py",
                      "Infinitesimal.py",
                      "Integer.py",
                      "Irrational.py",
                      "Negative.py",
                      "Nonnegative.py",
                      "Nonpositive.py",
                      "Nonzero.py",
                      "Odd.py",
                      "Positive.py",
                      "Prime.py",
                      "Rational.py",
                      "Real.py",
                      "Transcendental.py",
                      "Zero.py"
                    ]
                  ],
                  "Refine in context manager.py",
                  "Refine.py"
                ]
              ],
              "Simplify.py",
              [
                "Substitutions and replacements",
                [
                  "Replace a pattern with an object.py",
                  "Replace a pattern with some function of that object.py",
                  "Replace anything with some function of that thing.py",
                  "Replace exact subexpressions.py",
                  "Replace one object with another.py",
                  "Replace one object with some function of its arguments.py",
                  "Substitute multiple subexpressions simultaneously.py",
                  "Substitute multiple subexpressions successively.py",
                  "Substitute one subexpression for another.py"
                ]
              ],
              [
                "Trigonometric functions",
                [
                  "Expansion.py",
                  "Simplification, possibly to exponentials.py",
                  "Simplification.py"
                ]
              ]
            ]
          ],
          "Setup.py",
          [
            "Solvers",
            [
              "Solve differential equation.py",
              "Solve for one variable.py",
              "Solve for two variables.py"
            ]
          ]
        ]
      ],
      [
        "h5py",
        [
          "Close a file.py",
          "Get array.py",
          "Get scalar.py",
          "Open a file.py",
          "Setup.py"
        ]
      ],
      [
        "numba",
        [
          "Jit function with specified signature.py",
          "Jit function.py",
          "Setup.py"
        ]
      ]
    ]
  ],
  [
    "Snippets02",
    [
      [
        "Astropy",
        [
          [
            "Constants",
            [
              "Astronomical Unit [(mathrm{m})].py",
              "Atmosphere [(mathrm{Pa})].py",
              "Atomic mass [(mathrm{kg})].py",
              "Avogadro\u2019s number [(1  mathrm{mol})].py",
              "Bohr magneton [(mathrm{J}mathrm{T})].py",
              "Bohr radius [(mathrm{m})].py",
              "Boltzmann constant [(mathrm{J}  mathrm{K})].py",
              "Converting to SI.py",
              "Converting to cgs.py",
              "Earth equatorial radius [(mathrm{m})].py",
              "Earth mass [(mathrm{kg})].py",
              "Electric constant [(mathrm{F}mathrm{m})].py",
              "Electron charge [(mathrm{C})].py",
              "Electron mass [(mathrm{kg})].py",
              "Extracting uncertainty.py",
              "Extracting units.py",
              "Extracting value.py",
              "Fine-structure constant (dimensionless).py",
              "Gas constant [(mathrm{J}  (mathrm{K}, mathrm{mol}))].py",
              "Gravitational constant [(mathrm{m}^3  (mathrm{kg}, mathrm{s}^2))].py",
              "Jupiter equatorial radius [(mathrm{m})].py",
              "Jupiter mass [(mathrm{kg})].py",
              "Kiloparsec [(mathrm{m})].py",
              "Magnetic constant [(mathrm{N}mathrm{A}^2)].py",
              "Neutron mass [(mathrm{kg})].py",
              "Parsec [(mathrm{m})].py",
              "Planck constant [(mathrm{J}, mathrm{s})].py",
              "Proton mass [(mathrm{kg})].py",
              "Reduced Planck constant [(mathrm{J}, mathrm{s})].py",
              "Rydberg constant [(1  mathrm{m})].py",
              "Setup.py",
              "Solar luminosity [(mathrm{W})].py",
              "Solar mass [(mathrm{kg})].py",
              "Solar radius [(mathrm{m})].py",
              "Speed of light in vacuum [(mathrm{m}  mathrm{s})].py",
              "Standard acceleration of gravity [(mathrm{m}  mathrm{s}^2)].py",
              "Stefan-Boltzmann constant [(mathrm{W}  (mathrm{K}^4, mathrm{m}^2))].py",
              "Wien wavelength displacement law constant [(mathrm{m}, mathrm{K})].py"
            ]
          ]
        ]
      ],
      [
        "Matplotlib",
        [
          [
            "Example plots",
            [
              "3-d plot.py",
              "Basic line plot.py",
              "Contour plot.py",
              "Error bars.py",
              "Grouped plots.py",
              "Histogram.py"
            ]
          ],
          "Save the current figure.py",
          "Setup for notebook.py",
          "Setup for scripts.py"
        ]
      ],
      [
        "NumPy",
        [
          [
            "Creating arrays",
            [
              "Array from list of data.py",
              "Coordinate matrices from coordinate vectors.py",
              "Copy of existing data.py",
              "Evenly spaced numbers over a specified interval.py",
              "Evenly spaced values within a given interval.py",
              "New array of given shape.py",
              "New array shaped like another.py",
              "Numbers spaced evenly on a log scale.py",
              "Return copy of arrays, combined into one.py",
              "Return views of the data, split at given indices along given axis.py",
              "Return views of the data, split into $N$ groups.py"
            ]
          ],
          [
            "File IO",
            [
              "Read data from .npy or .npz file.py",
              "Read data from simple text file.py",
              "Read data from text file with missing values.py",
              "Write multiple arrays to single .npy file.py",
              "Write multiple arrays to single .npz file.py",
              "Write multiple arrays to single compressed .npz file.py",
              "Write multiple arrays to text file.py",
              "Write single array to single .npy file.py",
              "Write single array to text file.py"
            ]
          ],
          [
            "Indexing and testing arrays",
            [
              "Get number of dimensions of array.py",
              "Get shape of array.py",
              [
                "Index a multi-dimensional array",
                [
                  "Get elements $N$ to $M$ along each final axis.py",
                  "Get elements satisfying a condition (flattened result).py",
                  "Get first $N$ elements along each final axis.py",
                  "Get last $N$ elements along each final axis.py",
                  "Get one element.py"
                ]
              ],
              [
                "Index a one-dimensional array",
                [
                  "Get elements $N$ to $M$.py",
                  "Get elements satisfying a condition.py",
                  "Get first $N$ elements.py",
                  "Get last $N$ elements.py",
                  "Get one element.py"
                ]
              ],
              [
                "Index an array of unknown dimension",
                [
                  "Get elements $N$ to $M$ along each final axis.py",
                  "Get elements satisfying a condition (flattened result).py",
                  "Get first $N$ elements along each final axis.py",
                  "Get last $N$ elements along each final axis.py"
                ]
              ],
              "Test if array is empty.py"
            ]
          ],
          [
            "Polynomials",
            [
              "Convert between types.py",
              "Differentiate $n$ times.py",
              "Differentiate once.py",
              "Evaluate polynomial at given points.py",
              "Find roots.py",
              "Fit to data with series of degree $n$.py",
              "Get coefficients (constant at index 0, higher indices for higher orders).py",
              "Get degree of polynomial (one less than number of coefficients).py",
              "Get domain (scaled and offset domain of function for fitting).py",
              "Get window (natural domain of basis functions).py",
              "Instantiate from basis element $n$.py",
              "Instantiate from coefficients.py",
              "Instantiate from roots.py",
              "Integrate $n$ times.py",
              "Integrate once.py",
              "Integrate with given lower bound and integration constant $k$.py",
              "Return $n$ equally spaced $(x,y)$ values.py",
              "Setup.py"
            ]
          ],
          [
            "Pretty printing",
            [
              "Context manager.py",
              [
                "Formatting functions for specific dtypes",
                [
                  "Set formatter for `bool` type.py",
                  "Set formatter for `complexfloat` type.py",
                  "Set formatter for `datetime` type.py",
                  "Set formatter for `float` type.py",
                  "Set formatter for `int` type.py",
                  "Set formatter for `longcomplexfloat` type.py",
                  "Set formatter for `longfloat` type.py",
                  "Set formatter for `timedelta` type.py",
                  "Set formatter for all `complex` types.py",
                  "Set formatter for all `float` types.py",
                  "Set formatter for all `int` types.py",
                  "Set formatter for all `str` types.py",
                  "Set formatter for all types.py"
                ]
              ],
              "Print $N$ elements at each end of a summary.py",
              "Print to given precision.py",
              "Set number of characters per line.py",
              "Set string with which to represent infinity.py",
              "Set string with which to represent nan.py",
              "Summarize arrays with more than $N+1$ elements.py",
              "Suppress printing of small values.py"
            ]
          ],
          [
            "Reshaping and viewing arrays",
            [
              "Exchange two axes in an array.py",
              "Permute axes, bringing given axis into new position.py",
              "Permute indices by a given amount along the given axis.py",
              "Return a copy of the data, cast to a different dtype.py",
              "Return a copy of the data, flattened to 1-D.py",
              "Return a view of the data with indices permuted.py",
              "Return a view of the data with indices reversed (transposed).py",
              "Return a view of the data, flattened to 1-D.py",
              "Return a view of the data, with a different dtype.py",
              "Return a view of the data, with a different shape.py",
              "Return a view of the data, with an extra axis.py",
              "Return copy of arrays, combined into one.py",
              "Return views of the data, split at given indices along given axis.py",
              "Return views of the data, split into $N$ groups.py"
            ]
          ],
          "Setup.py",
          [
            "Vectorized (universal) functions",
            [
              [
                "Arithmetic",
                [
                  "absolute Calculate the absolute value element-wise.py",
                  "add Add arguments element-wise.py",
                  "conj Return the complex conjugate, element-wise.py",
                  "divide Divide arguments element-wise.py",
                  "floor_divide Return the largest integer smaller or equal to the division of the inputs.py",
                  "fmod Return element-wise remainder of float division.py",
                  "mod Return element-wise remainder of integer division.py",
                  "modf Return the fractional and integral parts of an array, element-wise.py",
                  "multiply Multiply arguments element-wise.py",
                  "negative Numerical negative, element-wise.py",
                  "reciprocal Return the reciprocal of the argument, element-wise.py",
                  "remainder Return element-wise remainder of integer division.py",
                  "rint Round elements of the array to the nearest integer.py",
                  "sign Returns an element-wise indication of the sign of a number.py",
                  "sqrt Return the positive square-root of an array, element-wise with automatic domain.py",
                  "sqrt Return the positive square-root of an array, element-wise.py",
                  "square Return the element-wise square of the input.py",
                  "subtract Subtract arguments, element-wise.py",
                  "true_divide Returns a true division of the inputs, element-wise.py"
                ]
              ],
              [
                "Bit-twiddling functions",
                [
                  "bitwise_and Compute the bit-wise AND of two arrays element-wise.py",
                  "bitwise_or Compute the bit-wise OR of two arrays element-wise.py",
                  "bitwise_xor Compute the bit-wise XOR of two arrays element-wise.py",
                  "invert Compute bit-wise inversion, or bit-wise NOT, element-wise.py",
                  "left_shift Shift the bits of an integer to the left.py",
                  "right_shift Shift the bits of an integer to the right.py"
                ]
              ],
              [
                "Characterizing arrays",
                [
                  "all Returns True if all elements evaluate to True.py",
                  "any Returns True if any of the elements of a evaluate to True.py",
                  "argmax Return indices of the maximum values along the given axis.py",
                  "argmin Return indices of the minimum values along the given axis of a.py",
                  "max Return the maximum along a given axis.py",
                  "mean Returns the average of the array elements along given axis.py",
                  "min Return the minimum along a given axis.py",
                  "ptp Peak-to-peak (maximum - minimum) value along a given axis.py",
                  "std Returns the standard deviation of the array elements along given axis.py",
                  "trace Return the sum along diagonals of the array.py",
                  "var Returns the variance of the array elements, along given axis.py"
                ]
              ],
              [
                "Comparisons between two arrays",
                [
                  "equal Return $(x_1 == x_2)$ element-wise.py",
                  "fmax Element-wise maximum of array elements.py",
                  "fmin Element-wise minimum of array elements.py",
                  "greater Return the truth value of $(x_1  x_2)$ element-wise.py",
                  "greater_equal Return the truth value of $(x_1 geq x_2)$ element-wise.py",
                  "less Return the truth value of $(x_1  x_2)$ element-wise.py",
                  "less_equal Return the truth value of $(x_1 leq x_2)$ element-wise.py",
                  "logical_and Compute the truth value of $x_1$ AND $x_2$ element-wise.py",
                  "logical_not Compute the truth value of NOT $x$ element-wise.py",
                  "logical_or Compute the truth value of $x_1$ OR $x_2$ element-wise.py",
                  "logical_xor Compute the truth value of $x_1$ XOR $x_2$, element-wise.py",
                  "maximum Element-wise maximum of array elements.py",
                  "minimum Element-wise minimum of array elements.py",
                  "not_equal Return $(x_1 != x_2)$ element-wise.py"
                ]
              ],
              [
                "Complex numbers",
                [
                  "angle Angle of the complex argument.py",
                  "conj Complex conjugate, element-wise.py",
                  "imag Imaginary part of the elements of the array.py",
                  "real Real part of the elements of the array.py",
                  "unwrap Unwrap radian phase by changing jumps greater than $pi$ to their $2pi$ complement.py"
                ]
              ],
              [
                "Float functions",
                [
                  "ceil Return the ceiling of the input, element-wise.py",
                  "copysign Change the sign of $x_1$ to that of $x_2$, element-wise.py",
                  "floor Return the floor of the input, element-wise.py",
                  "fmod Return the element-wise remainder of division.py",
                  "frexp Decompose the elements of $x$ into mantissa and twos exponent.py",
                  "iscomplex Returns a bool array, where True if input element is complex.py",
                  "isfinite Test element-wise for finiteness (not infinity and not NaN).py",
                  "isinf Test element-wise for positive or negative infinity.py",
                  "isnan Test element-wise for NaN and return result as a boolean array.py",
                  "isreal Returns a bool array, where True if input element is real.py",
                  "ldexp Returns $x_1, 2^{x_2}$, element-wise.py",
                  "modf Return the fractional and integral parts of an array, element-wise.py",
                  "nextafter Return the next floating-point value after $x_1$ towards $x_2$, element-wise.py",
                  "signbit Returns element-wise True where signbit is set (less than zero).py",
                  "trunc Return the truncated value of the input, element-wise.py"
                ]
              ],
              [
                "Logarithms and exponentials",
                [
                  "exp Calculate the exponential of all elements in the input array.py",
                  "exp2 Calculate $2^p$ for all $p$ in the input array.py",
                  "expm1 Calculate $exp(x) - 1$ for all elements in the array.py",
                  "log Natural logarithm, element-wise with automatic domain.py",
                  "log Natural logarithm, element-wise.py",
                  "log10 Return the base 10 logarithm of the input array, element-wise with automatic domain.py",
                  "log10 Return the base 10 logarithm of the input array, element-wise.py",
                  "log1p Calculate $log(1+x)$ for all elements in the array.py",
                  "log2 Base-2 logarithm of $x$ with automatic domain.py",
                  "log2 Base-2 logarithm of $x$.py",
                  "logaddexp Logarithm of the sum of exponentiations of the inputs.py",
                  "logaddexp2 Logarithm of the sum of exponentiations of the inputs in base-2.py",
                  "logn Return the base $n$ logarithm of the input array, element-wise with automatic domain.py",
                  "power First array elements raised to powers from second array, element-wise with automatic domain.py",
                  "power First array elements raised to powers from second array, element-wise.py",
                  "reciprocal Return the reciprocal of the argument, element-wise.py",
                  "sqrt Return the positive square-root of an array, element-wise with automatic domain.py",
                  "sqrt Return the positive square-root of an array, element-wise.py",
                  "square Return the element-wise square of the input.py"
                ]
              ],
              [
                "Matrix and vector products",
                [
                  "cross Cross product of two (arrays of) vectors.py",
                  "dot Dot product of two arrays over last and second-to-last dimensions, respectively.py",
                  "einsum Evaluate Einstein summation convention on operands.py",
                  "inner Inner product, summing over last two axes.py",
                  "kron Kronecker product of arrays.py",
                  "outer Compute outer product of two vectors (automatically flattened).py",
                  "tensordot Tensor dot product over given pairs of axes.py",
                  "tensordot Tensor dot product over last $n$ axes of a and first $n$ of b.py",
                  "vdot Dot product of two complex vectors, conjugating the first.py"
                ]
              ],
              [
                "Rounding and clipping",
                [
                  "around Evenly round to the given number of decimals.py",
                  "ceil Ceiling of the input, element-wise.py",
                  "clip Clip (limit) the values in an array.py",
                  "fix Round to nearest integer towards zero.py",
                  "floor Floor of the input, element-wise.py",
                  "nan_to_num Replace NaNs with zero and inf with finite numbers.py",
                  "real_if_close Truncate complex parts if within `tol` times machine epsilon of zero.py",
                  "rint Round elements of the array to the nearest integer.py",
                  "trunc Truncated value of the input, element-wise.py"
                ]
              ],
              [
                "Special functions (see scipy.special)",
                [
                  "i0 Modified Bessel function of the first kind, order 0.py",
                  "sinc Return the sinc function.py"
                ]
              ],
              [
                "Sums, products, differences within array",
                [
                  "convolve Discrete, linear convolution of two one-dimensional sequences.py",
                  "cumprod Cumulative product of elements along a given axis.py",
                  "cumsum Cumulative sum of the elements along a given axis.py",
                  "diff Calculate the n-th order discrete difference along given axis.py",
                  "ediff1d Differences between consecutive elements of an array.py",
                  "gradient Gradient of an N-dimensional array.py",
                  "interp One-dimensional linear interpolation.py",
                  "nansum Sum of array elements over a given axis treating NaNs as zero.py",
                  "prod Product of array elements over a given axis.py",
                  "sum Sum of array elements over a given axis.py",
                  "trapz Integrate along the given axis using the composite trapezoidal rule.py"
                ]
              ],
              [
                "Trigonometric and hyperbolic functions",
                [
                  "arccos Trigonometric inverse cosine, element-wise with automatic domain.py",
                  "arccos Trigonometric inverse cosine, element-wise.py",
                  "arccosh Inverse hyperbolic cosine, element-wise.py",
                  "arcsin Trigonometric inverse sine, element-wise with automatic domain.py",
                  "arcsin Trigonometric inverse sine, element-wise.py",
                  "arcsinh Inverse hyperbolic sine element-wise.py",
                  "arctan Trigonometric inverse tangent, element-wise.py",
                  "arctan2 Element-wise arc tangent of $x_1x_2$ choosing the quadrant correctly.py",
                  "arctanh Inverse hyperbolic tangent, element-wise with automatic domain.py",
                  "arctanh Inverse hyperbolic tangent, element-wise.py",
                  "cos Cosine element-wise.py",
                  "cosh Hyperbolic cosine, element-wise.py",
                  "deg2rad Convert angles from degrees to radians.py",
                  "hypot Given the \u201clegs\u201d of a right triangle, return its hypotenuse.py",
                  "rad2deg Convert angles from radians to degrees.py",
                  "sin Trigonometric sine, element-wise.py",
                  "sinh Hyperbolic sine, element-wise.py",
                  "tan Compute tangent element-wise.py",
                  "tanh Compute hyperbolic tangent element-wise.py",
                  "unwrap Unwrap radian phase by changing jumps greater than $pi$ to their $2pi$ complement.py"
                ]
              ]
            ]
          ]
        ]
      ],
      [
        "Python",
        [
          [
            "Basic file inputoutput",
            [
              "Read file into string, operating on each line.py",
              "Read file into string.py"
            ]
          ],
          [
            "Defining classes",
            [
              "Complicated class.py",
              "Simple class.py",
              "Subclass.py"
            ]
          ],
          [
            "Defining functions",
            [
              "Complicated function.py",
              "Simple function.py"
            ]
          ],
          [
            "Lists",
            [
              "Conditional alternative list comprehension.py",
              "Conditional list comprehension.py",
              "List comprehension.py",
              "Reversed list.py",
              "Sort two lists at the same time.py",
              "Sorted list.py"
            ]
          ],
          [
            "Regular expressions",
            [
              "Basic search (match) for exact pattern at beginning of string.py",
              "Basic search for pattern anywhere in string.py",
              "Basic substitution.py",
              [
                "Character classes and alternatives",
                [
                  "Alternatives.py",
                  "Exclusive character classes.py",
                  "Inclusive character classes.py",
                  [
                    "Standard character-class abbreviations",
                    [
                      "Any alphanumeric character.py",
                      "Any decimal digit.py",
                      "Any non-alphanumeric character.py",
                      "Any non-digit character.py",
                      "Any non-whitespace character.py",
                      "Any whitespace character.py"
                    ]
                  ]
                ]
              ],
              [
                "Compilation flags",
                [
                  "Display debug info about compiled regex.py",
                  "Do case-insensitive matches.py",
                  "Enable verbose REs, for cleaner and more organized code.py",
                  "Make . match any character, including newlines.py",
                  "Make w, W, b, B, s, and S Unicode aware.py",
                  "Make w, W, b, B, s, and S dependent on the current locale.py",
                  "Multi-line matching, affecting ^ and $.py"
                ]
              ],
              [
                "Escaped special characters",
                [
                  "$.py",
                  "(.py",
                  ").py",
                  "+.py",
                  ".py",
                  "[.py",
                  "].py",
                  "^.py",
                  "{.py",
                  "}.py"
                ]
              ],
              [
                "Lookaheadbehind",
                [
                  "Negative lookahead.py",
                  "Negative lookbehind.py",
                  "Positive lookahead.py",
                  "Positive lookbehind.py"
                ]
              ],
              [
                "Repetition",
                [
                  "Match 0 or 1 repetitions of the preceding, greedily.py",
                  "Match 0 or 1 repetitions of the preceding, non-greedily.py",
                  "Match 0 or more repetitions of the preceding, greedily.py",
                  "Match 0 or more repetitions of the preceding, non-greedily.py",
                  "Match 1 or more repetitions of the preceding, greedily.py",
                  "Match 1 or more repetitions of the preceding, non-greedily.py",
                  "Match between m and n repetions of the preceding, greedily.py",
                  "Match between m and n repetions of the preceding, non-greedily.py",
                  "Match exactly n repeititions of the preceding.py"
                ]
              ],
              "Setup.py",
              "Substitution with backreferences.py"
            ]
          ],
          "Setup.py"
        ]
      ],
      [
        "SciPy",
        [
          [
            "Fast Fourier Transform routines",
            [
              "Setup.py"
            ]
          ],
          [
            "Integration and ODE solvers",
            [
              [
                "Integrate given fixed samples",
                [
                  "Romberg Integration to compute integral from $2^k + 1$ evenly spaced samples.py",
                  "Simpson's rule to compute integral from samples.py",
                  "Trapezoidal rule to compute integral from samples.py",
                  "Trapezoidal rule to cumulatively compute integral from samples.py"
                ]
              ],
              [
                "Integrate given function object",
                [
                  "General purpose double integration.py",
                  "General purpose n-fold integration.py",
                  "General purpose triple integration.py",
                  "General-purpose integration.py",
                  "Integrate func(x) using Gaussian quadrature of order $n$.py",
                  "Integrate using Romberg integration.py",
                  "Integrate with given tolerance using Gaussian quadrature.py"
                ]
              ],
              [
                "Numerically integrate ODE systems",
                [
                  "General integration of ordinary differential equations with known gradient.py",
                  "General integration of ordinary differential equations.py",
                  "Integrate ODE using VODE and ZVODE routines.py"
                ]
              ],
              "Setup.py"
            ]
          ],
          [
            "Interpolation and smoothing splines",
            [
              "InterpolatedUnivariateSpline.py",
              "Setup.py",
              "interp1d.py",
              "splrep  splrev.py"
            ]
          ],
          [
            "Linear algebra",
            [
              "Setup.py"
            ]
          ],
          [
            "Optimization and root-finding routines",
            [
              [
                "Constrained multivariate minimization",
                [
                  "Constrained Sequential Least SQuares Programming (SLSQP).py",
                  "Unconstrained Sequential Least SQuares Programming (SLSQP).py"
                ]
              ],
              [
                "Fitting (see also numpy.polynomial)",
                [
                  "Basic function fitting.py"
                ]
              ],
              [
                "General-purpose optimization",
                [
                  "Broyden-Fletcher-Goldfarb-Shanno (BFGS), analytical derivative.py",
                  "Broyden-Fletcher-Goldfarb-Shanno (BFGS), finite-difference derivative.py",
                  "Nelder-Mead Simplex algorithm.py",
                  "Newton-Conjugate-Gradient, Hessian product.py",
                  "Newton-Conjugate-Gradient, full Hessian.py"
                ]
              ],
              [
                "Scalar function minimization",
                [
                  "Bounded minimization.py",
                  "Unconstrained minimization.py"
                ]
              ],
              "Setup.py"
            ]
          ],
          [
            "Physical and mathematical constants",
            [
              [
                "CODATA physical constants",
                [
                  [
                    "A",
                    [
                      "Angstrom star.py",
                      "Avogadro constant.py",
                      "alpha particle mass energy equivalent in MeV.py",
                      "alpha particle mass energy equivalent.py",
                      "alpha particle mass in u.py",
                      "alpha particle mass.py",
                      "alpha particle molar mass.py",
                      "alpha particle-electron mass ratio.py",
                      "alpha particle-proton mass ratio.py",
                      "atomic mass constant energy equivalent in MeV.py",
                      "atomic mass constant energy equivalent.py",
                      "atomic mass constant.py",
                      "atomic mass unit-electron volt relationship.py",
                      "atomic mass unit-hartree relationship.py",
                      "atomic mass unit-hertz relationship.py",
                      "atomic mass unit-inverse meter relationship.py",
                      "atomic mass unit-joule relationship.py",
                      "atomic mass unit-kelvin relationship.py",
                      "atomic mass unit-kilogram relationship.py",
                      "atomic unit of 1st hyperpolarizability.py",
                      "atomic unit of 2nd hyperpolarizability.py",
                      "atomic unit of action.py",
                      "atomic unit of charge density.py",
                      "atomic unit of charge.py",
                      "atomic unit of current.py",
                      "atomic unit of electric dipole mom.py",
                      "atomic unit of electric field gradient.py",
                      "atomic unit of electric field.py",
                      "atomic unit of electric polarizability.py",
                      "atomic unit of electric potential.py",
                      "atomic unit of electric quadrupole mom.py",
                      "atomic unit of energy.py",
                      "atomic unit of force.py",
                      "atomic unit of length.py",
                      "atomic unit of mag. dipole mom.py",
                      "atomic unit of mag. flux density.py",
                      "atomic unit of magnetizability.py",
                      "atomic unit of mass.py",
                      "atomic unit of mom.um.py",
                      "atomic unit of permittivity.py",
                      "atomic unit of time.py",
                      "atomic unit of velocity.py"
                    ]
                  ],
                  [
                    "B",
                    [
                      "Bohr magneton in HzT.py",
                      "Bohr magneton in KT.py",
                      "Bohr magneton in eVT.py",
                      "Bohr magneton in inverse meters per tesla.py",
                      "Bohr magneton.py",
                      "Bohr radius.py",
                      "Boltzmann constant in HzK.py",
                      "Boltzmann constant in eVK.py",
                      "Boltzmann constant in inverse meters per kelvin.py",
                      "Boltzmann constant.py"
                    ]
                  ],
                  [
                    "C",
                    [
                      "Compton wavelength over (2pi).py",
                      "Compton wavelength.py",
                      "Cu x unit.py",
                      "characteristic impedance of vacuum.py",
                      "classical electron radius.py",
                      "conductance quantum.py",
                      "conventional value of Josephson constant.py",
                      "conventional value of von Klitzing constant.py"
                    ]
                  ],
                  [
                    "D",
                    [
                      "deuteron g factor.py",
                      "deuteron mag. mom. to Bohr magneton ratio.py",
                      "deuteron mag. mom. to nuclear magneton ratio.py",
                      "deuteron mag. mom.py",
                      "deuteron mass energy equivalent in MeV.py",
                      "deuteron mass energy equivalent.py",
                      "deuteron mass in u.py",
                      "deuteron mass.py",
                      "deuteron molar mass.py",
                      "deuteron rms charge radius.py",
                      "deuteron-electron mag. mom. ratio.py",
                      "deuteron-electron mass ratio.py",
                      "deuteron-neutron mag. mom. ratio.py",
                      "deuteron-proton mag. mom. ratio.py",
                      "deuteron-proton mass ratio.py"
                    ]
                  ],
                  [
                    "E",
                    [
                      "electric constant.py",
                      "electron charge to mass quotient.py",
                      "electron g factor.py",
                      "electron gyromag. ratio over 2 pi.py",
                      "electron gyromag. ratio.py",
                      "electron mag. mom. anomaly.py",
                      "electron mag. mom. to Bohr magneton ratio.py",
                      "electron mag. mom. to nuclear magneton ratio.py",
                      "electron mag. mom.py",
                      "electron mass energy equivalent in MeV.py",
                      "electron mass energy equivalent.py",
                      "electron mass in u.py",
                      "electron mass.py",
                      "electron molar mass.py",
                      "electron to alpha particle mass ratio.py",
                      "electron to shielded helion mag. mom. ratio.py",
                      "electron to shielded proton mag. mom. ratio.py",
                      "electron volt-atomic mass unit relationship.py",
                      "electron volt-hartree relationship.py",
                      "electron volt-hertz relationship.py",
                      "electron volt-inverse meter relationship.py",
                      "electron volt-joule relationship.py",
                      "electron volt-kelvin relationship.py",
                      "electron volt-kilogram relationship.py",
                      "electron volt.py",
                      "electron-deuteron mag. mom. ratio.py",
                      "electron-deuteron mass ratio.py",
                      "electron-helion mass ratio.py",
                      "electron-muon mag. mom. ratio.py",
                      "electron-muon mass ratio.py",
                      "electron-neutron mag. mom. ratio.py",
                      "electron-neutron mass ratio.py",
                      "electron-proton mag. mom. ratio.py",
                      "electron-proton mass ratio.py",
                      "electron-tau mass ratio.py",
                      "electron-triton mass ratio.py",
                      "elementary charge over h.py",
                      "elementary charge.py"
                    ]
                  ],
                  "Example.py",
                  [
                    "F",
                    [
                      "Faraday constant for conventional electric current.py",
                      "Faraday constant.py",
                      "Fermi coupling constant.py",
                      "fine-structure constant.py",
                      "first radiation constant for spectral radiance.py",
                      "first radiation constant.py"
                    ]
                  ],
                  [
                    "H",
                    [
                      "Hartree energy in eV.py",
                      "Hartree energy.py",
                      "hartree-atomic mass unit relationship.py",
                      "hartree-electron volt relationship.py",
                      "hartree-hertz relationship.py",
                      "hartree-inverse meter relationship.py",
                      "hartree-joule relationship.py",
                      "hartree-kelvin relationship.py",
                      "hartree-kilogram relationship.py",
                      "helion g factor.py",
                      "helion mag. mom. to Bohr magneton ratio.py",
                      "helion mag. mom. to nuclear magneton ratio.py",
                      "helion mag. mom.py",
                      "helion mass energy equivalent in MeV.py",
                      "helion mass energy equivalent.py",
                      "helion mass in u.py",
                      "helion mass.py",
                      "helion molar mass.py",
                      "helion-electron mass ratio.py",
                      "helion-proton mass ratio.py",
                      "hertz-atomic mass unit relationship.py",
                      "hertz-electron volt relationship.py",
                      "hertz-hartree relationship.py",
                      "hertz-inverse meter relationship.py",
                      "hertz-joule relationship.py",
                      "hertz-kelvin relationship.py",
                      "hertz-kilogram relationship.py"
                    ]
                  ],
                  [
                    "I",
                    [
                      "inverse fine-structure constant.py",
                      "inverse meter-atomic mass unit relationship.py",
                      "inverse meter-electron volt relationship.py",
                      "inverse meter-hartree relationship.py",
                      "inverse meter-hertz relationship.py",
                      "inverse meter-joule relationship.py",
                      "inverse meter-kelvin relationship.py",
                      "inverse meter-kilogram relationship.py",
                      "inverse of conductance quantum.py"
                    ]
                  ],
                  [
                    "J",
                    [
                      "Josephson constant.py",
                      "joule-atomic mass unit relationship.py",
                      "joule-electron volt relationship.py",
                      "joule-hartree relationship.py",
                      "joule-hertz relationship.py",
                      "joule-inverse meter relationship.py",
                      "joule-kelvin relationship.py",
                      "joule-kilogram relationship.py"
                    ]
                  ],
                  [
                    "K",
                    [
                      "kelvin-atomic mass unit relationship.py",
                      "kelvin-electron volt relationship.py",
                      "kelvin-hartree relationship.py",
                      "kelvin-hertz relationship.py",
                      "kelvin-inverse meter relationship.py",
                      "kelvin-joule relationship.py",
                      "kelvin-kilogram relationship.py",
                      "kilogram-atomic mass unit relationship.py",
                      "kilogram-electron volt relationship.py",
                      "kilogram-hartree relationship.py",
                      "kilogram-hertz relationship.py",
                      "kilogram-inverse meter relationship.py",
                      "kilogram-joule relationship.py",
                      "kilogram-kelvin relationship.py"
                    ]
                  ],
                  [
                    "L",
                    [
                      "Loschmidt constant (273.15 K, 100 kPa).py",
                      "Loschmidt constant (273.15 K, 101.325 kPa).py",
                      "lattice parameter of silicon.py"
                    ]
                  ],
                  [
                    "M",
                    [
                      "Mo x unit.py",
                      "mag. constant.py",
                      "mag. flux quantum.py",
                      "molar Planck constant times c.py",
                      "molar Planck constant.py",
                      "molar gas constant.py",
                      "molar mass constant.py",
                      "molar mass of carbon-12.py",
                      "molar volume of ideal gas (273.15 K, 100 kPa).py",
                      "molar volume of ideal gas (273.15 K, 101.325 kPa).py",
                      "molar volume of silicon.py",
                      "muon Compton wavelength over 2 pi.py",
                      "muon Compton wavelength.py",
                      "muon g factor.py",
                      "muon mag. mom. anomaly.py",
                      "muon mag. mom. to Bohr magneton ratio.py",
                      "muon mag. mom. to nuclear magneton ratio.py",
                      "muon mag. mom.py",
                      "muon mass energy equivalent in MeV.py",
                      "muon mass energy equivalent.py",
                      "muon mass in u.py",
                      "muon mass.py",
                      "muon molar mass.py",
                      "muon-electron mass ratio.py",
                      "muon-neutron mass ratio.py",
                      "muon-proton mag. mom. ratio.py",
                      "muon-proton mass ratio.py",
                      "muon-tau mass ratio.py"
                    ]
                  ],
                  [
                    "N",
                    [
                      "Newtonian constant of gravitation over h-bar c.py",
                      "Newtonian constant of gravitation.py",
                      "natural unit of action in eV s.py",
                      "natural unit of action.py",
                      "natural unit of energy in MeV.py",
                      "natural unit of energy.py",
                      "natural unit of length.py",
                      "natural unit of mass.py",
                      "natural unit of mom.um in MeVc.py",
                      "natural unit of mom.um.py",
                      "natural unit of time.py",
                      "natural unit of velocity.py",
                      "neutron Compton wavelength over 2 pi.py",
                      "neutron Compton wavelength.py",
                      "neutron g factor.py",
                      "neutron gyromag. ratio over 2 pi.py",
                      "neutron gyromag. ratio.py",
                      "neutron mag. mom. to Bohr magneton ratio.py",
                      "neutron mag. mom. to nuclear magneton ratio.py",
                      "neutron mag. mom.py",
                      "neutron mass energy equivalent in MeV.py",
                      "neutron mass energy equivalent.py",
                      "neutron mass in u.py",
                      "neutron mass.py",
                      "neutron molar mass.py",
                      "neutron to shielded proton mag. mom. ratio.py",
                      "neutron-electron mag. mom. ratio.py",
                      "neutron-electron mass ratio.py",
                      "neutron-muon mass ratio.py",
                      "neutron-proton mag. mom. ratio.py",
                      "neutron-proton mass difference energy equivalent in MeV.py",
                      "neutron-proton mass difference energy equivalent.py",
                      "neutron-proton mass difference in u.py",
                      "neutron-proton mass difference.py",
                      "neutron-proton mass ratio.py",
                      "neutron-tau mass ratio.py",
                      "nuclear magneton in KT.py",
                      "nuclear magneton in MHzT.py",
                      "nuclear magneton in eVT.py",
                      "nuclear magneton in inverse meters per tesla.py",
                      "nuclear magneton.py"
                    ]
                  ],
                  [
                    "Other",
                    [
                      "{220} lattice spacing of silicon.py"
                    ]
                  ],
                  [
                    "P",
                    [
                      "Planck constant in eV s.py",
                      "Planck constant over 2 pi in eV s.py",
                      "Planck constant over 2 pi times c in MeV fm.py",
                      "Planck constant over 2 pi.py",
                      "Planck constant.py",
                      "Planck length.py",
                      "Planck mass energy equivalent in GeV.py",
                      "Planck mass.py",
                      "Planck temperature.py",
                      "Planck time.py",
                      "proton Compton wavelength over 2 pi.py",
                      "proton Compton wavelength.py",
                      "proton charge to mass quotient.py",
                      "proton g factor.py",
                      "proton gyromag. ratio over 2 pi.py",
                      "proton gyromag. ratio.py",
                      "proton mag. mom. to Bohr magneton ratio.py",
                      "proton mag. mom. to nuclear magneton ratio.py",
                      "proton mag. mom.py",
                      "proton mag. shielding correction.py",
                      "proton mass energy equivalent in MeV.py",
                      "proton mass energy equivalent.py",
                      "proton mass in u.py",
                      "proton mass.py",
                      "proton molar mass.py",
                      "proton rms charge radius.py",
                      "proton-electron mass ratio.py",
                      "proton-muon mass ratio.py",
                      "proton-neutron mag. mom. ratio.py",
                      "proton-neutron mass ratio.py",
                      "proton-tau mass ratio.py"
                    ]
                  ],
                  [
                    "Q",
                    [
                      "quantum of circulation times 2.py",
                      "quantum of circulation.py"
                    ]
                  ],
                  [
                    "R",
                    [
                      "Rydberg constant times c in Hz.py",
                      "Rydberg constant times hc in J.py",
                      "Rydberg constant times hc in eV.py",
                      "Rydberg constant.py"
                    ]
                  ],
                  [
                    "S",
                    [
                      "Sackur-Tetrode constant (1 K, 100 kPa).py",
                      "Sackur-Tetrode constant (1 K, 101.325 kPa).py",
                      "Stefan-Boltzmann constant.py",
                      "second radiation constant.py",
                      "shielded helion gyromag. ratio over 2 pi.py",
                      "shielded helion gyromag. ratio.py",
                      "shielded helion mag. mom. to Bohr magneton ratio.py",
                      "shielded helion mag. mom. to nuclear magneton ratio.py",
                      "shielded helion mag. mom.py",
                      "shielded helion to proton mag. mom. ratio.py",
                      "shielded helion to shielded proton mag. mom. ratio.py",
                      "shielded proton gyromag. ratio over 2 pi.py",
                      "shielded proton gyromag. ratio.py",
                      "shielded proton mag. mom. to Bohr magneton ratio.py",
                      "shielded proton mag. mom. to nuclear magneton ratio.py",
                      "shielded proton mag. mom.py",
                      "speed of light in vacuum.py",
                      "standard acceleration of gravity.py",
                      "standard atmosphere.py",
                      "standard-state pressure.py"
                    ]
                  ],
                  [
                    "T",
                    [
                      "Thomson cross section.py",
                      "tau Compton wavelength over 2 pi.py",
                      "tau Compton wavelength.py",
                      "tau mass energy equivalent in MeV.py",
                      "tau mass energy equivalent.py",
                      "tau mass in u.py",
                      "tau mass.py",
                      "tau molar mass.py",
                      "tau-electron mass ratio.py",
                      "tau-muon mass ratio.py",
                      "tau-neutron mass ratio.py",
                      "tau-proton mass ratio.py",
                      "triton g factor.py",
                      "triton mag. mom. to Bohr magneton ratio.py",
                      "triton mag. mom. to nuclear magneton ratio.py",
                      "triton mag. mom.py",
                      "triton mass energy equivalent in MeV.py",
                      "triton mass energy equivalent.py",
                      "triton mass in u.py",
                      "triton mass.py",
                      "triton molar mass.py",
                      "triton-electron mass ratio.py",
                      "triton-proton mass ratio.py"
                    ]
                  ],
                  [
                    "U",
                    [
                      "unified atomic mass unit.py"
                    ]
                  ],
                  [
                    "V",
                    [
                      "von Klitzing constant.py"
                    ]
                  ],
                  [
                    "W",
                    [
                      "Wien frequency displacement law constant.py",
                      "Wien wavelength displacement law constant.py",
                      "weak mixing angle.py"
                    ]
                  ]
                ]
              ],
              [
                "Common physical constants",
                [
                  "Avogadro constant (N_mathrm{A}).py",
                  "Boltzmann constant (k_mathrm{B}).py",
                  "Electric constant (vacuum permittivity), (varepsilon_0).py",
                  "Electron mass (m_mathrm{e}).py",
                  "Elementary charge (e).py",
                  "Fine-structure constant (alpha).py",
                  "Magnetic constant (mu_0).py",
                  "Molar gas constant (R).py",
                  "Neutron mass (m_mathrm{n}).py",
                  "Newton's constant of gravitation (G_mathrm{N}).py",
                  "Planck's constant (h).py",
                  "Planck's reduced constant (hbar).py",
                  "Proton mass (m_mathrm{p}).py",
                  "Rydberg constant (R_infty).py",
                  "Speed of light in vacuum (c).py",
                  "Standard acceleration of gravity (g).py",
                  "Stefan-Boltzmann constant (sigma).py",
                  "Wien displacement law constant (b).py"
                ]
              ],
              [
                "Mathematical constants",
                [
                  "Geometric constant (pi).py",
                  "Golden ratio (phi).py"
                ]
              ],
              "Setup.py",
              [
                "Units",
                [
                  [
                    "Angle",
                    [
                      "Arc minute in radians.py",
                      "Arc second in radians.py",
                      "Degree in radians.py"
                    ]
                  ],
                  [
                    "Area",
                    [
                      "One acre in square meters.py",
                      "One hectare in square meters.py"
                    ]
                  ],
                  [
                    "Binary prefixes",
                    [
                      "exbi (2^{60}).py",
                      "gibi (2^{30}).py",
                      "kibi (2^{10}).py",
                      "mebi (2^{20}).py",
                      "pebi (2^{50}).py",
                      "tebi (2^{40}).py",
                      "yobi (2^{80}).py",
                      "zebi (2^{70}).py"
                    ]
                  ],
                  [
                    "Energy",
                    [
                      "One British thermal unit (International Steam Table) in Joules.py",
                      "One British thermal unit (thermochemical) in Joules.py",
                      "One calorie (International Steam Table calorie, 1956) in Joules.py",
                      "One calorie (thermochemical) in Joules.py",
                      "One electron volt in Joules.py",
                      "One erg in Joules.py",
                      "One ton of TNT in Joules.py"
                    ]
                  ],
                  [
                    "Force",
                    [
                      "One dyne in newtons.py",
                      "One kilogram force in newtons.py",
                      "One pound force in newtons.py"
                    ]
                  ],
                  [
                    "Length",
                    [
                      "One Angstrom in meters.py",
                      "One Fermi in meters.py",
                      "One astronomical unit in meters.py",
                      "One foot in meters.py",
                      "One inch in meters.py",
                      "One light year in meters.py",
                      "One micron in meters.py",
                      "One mil in meters.py",
                      "One mile in meters.py",
                      "One nautical mile in meters.py",
                      "One parsec in meters.py",
                      "One point in meters.py",
                      "One survey foot in meters.py",
                      "One survey mile in meters.py",
                      "One yard in meters.py"
                    ]
                  ],
                  [
                    "Optics",
                    [
                      "Convert optical frequency (nu) to wavelength (lambda).py",
                      "Convert wavelength (lambda) to optical frequency (nu).py"
                    ]
                  ],
                  [
                    "Power",
                    [
                      "One horsepower in watts.py"
                    ]
                  ],
                  [
                    "Pressure",
                    [
                      "One bar in pascals.py",
                      "One psi in pascals.py",
                      "One torr (mmHg) in pascals.py",
                      "Standard atmosphere in pascals.py"
                    ]
                  ],
                  [
                    "SI prefixes",
                    [
                      "atto (10^{\u221218}).py",
                      "centi (10^{\u22122}).py",
                      "deci (10^{\u22121}).py",
                      "deka (10^{1}).py",
                      "exa (10^{18}).py",
                      "femto (10^{\u221215}).py",
                      "giga (10^{9}).py",
                      "hecto (10^{2}).py",
                      "kilo (10^{3}).py",
                      "mega (10^{6}).py",
                      "micro (10^{\u22126}).py",
                      "milli (10^{\u22123}).py",
                      "nano (10^{\u22129}).py",
                      "peta (10^{15}).py",
                      "pico (10^{\u221212}).py",
                      "tera (10^{12}).py",
                      "yotta (10^{24}).py",
                      "zepto (10^{\u221221}).py",
                      "zetta (10^{21}).py"
                    ]
                  ],
                  [
                    "Speed",
                    [
                      "Kilometers per hour in meters per second.py",
                      "Miles per hour in meters per second.py",
                      "One Mach (approx., at 15 C, 1 atm) in meters per second.py",
                      "One knot in meters per second.py"
                    ]
                  ],
                  [
                    "Temperature",
                    [
                      "Convert Celsius to Fahrenheit.py",
                      "Convert Celsius to Kelvin.py",
                      "Convert Fahrenheit to Celsius.py",
                      "Convert Fahrenheit to Kelvin.py",
                      "Convert Kelvin to Celsius.py",
                      "Convert Kelvin to Fahrenheit.py",
                      "One Fahrenheit (only differences) in Kelvins.py",
                      "Zero of Celsius scale in Kelvin.py"
                    ]
                  ],
                  [
                    "Time",
                    [
                      "One Julian year (365.25 days) in seconds.py",
                      "One day in seconds.py",
                      "One hour in seconds.py",
                      "One minute in seconds.py",
                      "One week in seconds.py",
                      "One year (365 days) in seconds.py"
                    ]
                  ],
                  [
                    "Volume",
                    [
                      "One barrel in cubic meters.py",
                      "One fluid ounce (UK) in cubic meters.py",
                      "One fluid ounce (US) in cubic meters.py",
                      "One gallon (UK) in cubic meters.py",
                      "One gallon (US) in cubic meters.py",
                      "One liter in cubic meters.py"
                    ]
                  ],
                  [
                    "Weight",
                    [
                      "Atomic mass constant in kg.py",
                      "One Troy ounce in kg.py",
                      "One Troy pound in kg.py",
                      "One carat in kg.py",
                      "One grain in kg.py",
                      "One gram in kg.py",
                      "One long ton in kg.py",
                      "One metric ton in kg ((10^{3})).py",
                      "One ounce in kg.py",
                      "One pound (avoirdupois) in kg.py",
                      "One short ton in kg.py",
                      "One stone in kg.py"
                    ]
                  ]
                ]
              ]
            ]
          ],
          "Setup.py",
          [
            "Special functions",
            [
              [
                "Airy functions",
                [
                  "ai_zeros Compute $n$ zeros $a$ and $a'$ of $mathrm{Ai}(x)$ and $mathrm{Ai}'(x)$, and $mathrm{Ai}(a')$ and $mathrm{Ai}'(a)$.py",
                  "airy Airy functions and their derivatives.py",
                  "airye Exponentially scaled Airy functions and their derivatives.py",
                  "bi_zeros Compute $n$ zeros $b$ and $b'$ of $mathrm{Bi}(x)$ and $mathrm{Bi}'(x)$, and $mathrm{Bi}(b')$ and $mathrm{Bi}'(b)$.py"
                ]
              ],
              [
                "Bessel Functions",
                [
                  [
                    "Bessel Functions",
                    [
                      "hankel1 Hankel function of the first kind, $H^{(1)}_v(z)$.py",
                      "hankel1e Exponentially scaled Hankel function of the first kind, $H^{(1)}_v(z), e^{-i, z}$.py",
                      "hankel2 Hankel function of the second kind, $H^{(2)}_v(z)$.py",
                      "hankel2e Exponentially scaled Hankel function of the second kind, $H^{(2)}_v(z), e^{i, z}$.py",
                      "iv Modified Bessel function of the first kind of real order $v$, $I_v(z)$.py",
                      "ive Exponentially scaled modified Bessel function of the first kind of real order $v$, $I_v(z), e^{-Re{z}}$.py",
                      "jv Bessel function of the first kind of real order $v$, $J_v(z)$.py",
                      "jve Exponentially scaled Bessel function of the first kind of order $v$, $J_v(z), e^{-Im{z}}$.py",
                      "kn Modified Bessel function of the second kind of integer order $n$, $K_n(x)$.py",
                      "kv Modified Bessel function of the second kind of real order $v$, $K_v(z)$.py",
                      "kve Exponentially scaled modified Bessel function of the second kind, $K_v(z), e^{z}$.py",
                      "lmbda Compute sequence of lambda functions with arbitrary order $v$ and their derivatives.py",
                      "yn Bessel function of the second kind of integer order $n$, $Y_n(x)$.py",
                      "yv Bessel function of the second kind of real order $v$, $Y_v(z)$.py",
                      "yve Exponentially scaled Bessel function of the second kind of real order, $Y_v(z), e^{-Im{z}}$.py"
                    ]
                  ],
                  [
                    "Derivatives of Bessel Functions",
                    [
                      "h1vp Return the $n$th derivative of $H^{(1)}_v(z)$ with respect to $z$.py",
                      "h2vp Return the $n$th derivative of $H^{(2)}_v(z)$ with respect to z.py",
                      "ivp Return the $n$th derivative of $I_v(z)$ with respect to $z$.py",
                      "jvp Return the $n$th derivative of $J_v(z)$ with respect to $z$.py",
                      "kvp Return the $n$th derivative of $K_v(z)$ with respect to $z$.py",
                      "yvp Return the $n$th derivative of $Y_v(z)$ with respect to $z$.py"
                    ]
                  ],
                  [
                    "Faster versions of common Bessel Functions",
                    [
                      "i0 Modified Bessel function of order 0, $I_0(x)$.py",
                      "i0e Exponentially scaled modified Bessel function of order 0, $I_0(x), e^{-x}$.py",
                      "i1 Modified Bessel function of order 1, $I_1(x)$.py",
                      "i1e Exponentially scaled modified Bessel function of order 1, $I_1(x), e^{-x}$.py",
                      "j0 Bessel function the first kind of order 0, $J_0(x)$.py",
                      "j1 Bessel function of the first kind of order 1, $J_1(x)$.py",
                      "k0 Modified Bessel function K of order 0, $K_0(x)$.py",
                      "k0e Exponentially scaled modified Bessel function K of order 0, $K_0(x), e^{x}$.py",
                      "k1 Modified Bessel function of the first kind of order 1, $K_1(x)$.py",
                      "k1e Exponentially scaled modified Bessel function K of order 1, $K_1(x), e^{x}$.py",
                      "y0 Bessel function of the second kind of order 0, $Y_0(x)$.py",
                      "y1 Bessel function of the second kind of order 1, $Y_1(x)$.py"
                    ]
                  ],
                  [
                    "Integrals of Bessel Functions",
                    [
                      "besselpoly Weighted integral of a Bessel function, $int_0^1 x^lambda J_nu(2 a x) , dx$.py",
                      "it2i0k0 Integrals related to modified Bessel functions of order 0 $int_0^x frac{I_0(t)-1}{t}, dt$, $int_x^infty frac{K_0(t)}{t}, dt$.py",
                      "it2j0y0 Integrals related to Bessel functions of order 0 $int_0^x frac{1-J_0(t)}{t}, dt$, $int_x^infty frac{Y_0(t)}{t}, dt$.py",
                      "iti0k0 Integrals of modified Bessel functions of order 0 $int_0^x I_0(t), dt$, $int_0^x K_0(t), dt$.py",
                      "itj0y0 Integrals of Bessel functions of order 0 $int_0^x J_0(t), dt$, $int_0^x Y_0(t), dt$.py"
                    ]
                  ],
                  [
                    "Riccati-Bessel Functions",
                    [
                      "riccati_jn Compute the Ricatti-Bessel function of the first kind and its derivative for all orders up to and including n.py",
                      "riccati_yn Compute the Ricatti-Bessel function of the second kind and its derivative for all orders up to and including n.py"
                    ]
                  ],
                  [
                    "Spherical Bessel Functions",
                    [
                      "sph_in Compute the spherical Bessel function $i_n(z)$ and its derivative for all orders up to and including $n$.py",
                      "sph_inkn Compute the spherical Bessel functions, $i_n(z)$ and $k_n(z)$ and their derivatives for all orders up to and including $n$.py",
                      "sph_jn Compute the spherical Bessel function $j_n(z)$ and its derivative for all orders up to and including $n$.py",
                      "sph_jnyn Compute the spherical Bessel functions, $j_n(z)$ and $y_n(z)$ and their derivatives for all orders up to and including $n$.py",
                      "sph_kn Compute the spherical Bessel function $k_n(z)$ and its derivative for all orders up to and including $n$.py",
                      "sph_yn Compute the spherical Bessel function $y_n(z)$ and its derivative for all orders up to and including $n$.py"
                    ]
                  ],
                  [
                    "Zeros of Bessel Functions",
                    [
                      "jn_zeros Compute nt zeros of the Bessel function $J_n(x)$.py",
                      "jnjnp_zeros Compute nt (=1200) zeros of the Bessel functions $J_n$ and $J_n'$ and arange them in order of their magnitudes.py",
                      "jnp_zeros Compute nt zeros of the Bessel function $J_n'(x)$.py",
                      "jnyn_zeros Compute nt zeros of the Bessel functions $J_n(x)$, $J_n'(x)$, $Y_n(x)$, and $Y_n'(x)$, respectively.py",
                      "y0_zeros Returns nt (complex or real) zeros of $Y_0(z)$, $z_0$, and the value of $Y_0'(z_0) = -Y_1(z_0)$ at each zero.py",
                      "y1_zeros Returns nt (complex or real) zeros of $Y_1(z)$, $z_1$, and the value of $Y_1'(z_1) = Y_0(z_1)$ at each zero.py",
                      "y1p_zeros Returns nt (complex or real) zeros of $Y_1'(z)$, $z_1'$, and the value of $Y_1(z_1')$ at each zero.py",
                      "yn_zeros Compute nt zeros of the Bessel function $Y_n(x)$.py",
                      "ynp_zeros Compute nt zeros of the Bessel function $Y_n'(x)$.py"
                    ]
                  ]
                ]
              ],
              [
                "Combinatorics",
                [
                  "comb The number of combinations of N things taken k at a time.py",
                  "perm Permutations of N things taken k at a time, i.e., k-permutations of N.py"
                ]
              ],
              [
                "Convenience Functions",
                [
                  "cbrt $sqrt[3]{x}$.py",
                  "cosdg Cosine of the angle given in degrees.py",
                  "cosm1 $cos(x) - 1$ for use when $x$ is near zero.py",
                  "cotdg Cotangent of the angle given in degrees.py",
                  "exp10 $10^x$.py",
                  "exp2 $2^x$.py",
                  "expm1 $exp(x) - 1$ for use when $x$ is near zero.py",
                  "log1p Calculates $log(1+x)$ for use when $x$ is near zero.py",
                  "radian Convert from degrees to radians.py",
                  "round Round to nearest integer.py",
                  "sindg Sine of angle given in degrees.py",
                  "tandg Tangent of angle given in degrees.py",
                  "xlog1py Compute $x, log(1+y)$ so that the result is 0 if $x$ = 0.py",
                  "xlogy Compute $x, log(y)$ so that the result is 0 if $x$ = 0.py"
                ]
              ],
              [
                "Ellipsoidal Harmonics",
                [
                  "ellip_harm Ellipsoidal harmonic functions $E^p_n(l)$.py",
                  "ellip_harm_2 Ellipsoidal harmonic functions $F^p_n(l)$.py",
                  "ellip_normal Ellipsoidal harmonic normalization constants $gamma^p_n$.py"
                ]
              ],
              [
                "Elliptic Functions",
                [
                  "ellipe Complete elliptic integral of the second kind.py",
                  "ellipeinc Incomplete elliptic integral of the second kind.py",
                  "ellipj Jacobian elliptic functions.py",
                  "ellipk Computes the complete elliptic integral of the first kind.py",
                  "ellipkinc Incomplete elliptic integral of the first kind.py",
                  "ellipkm1 The complete elliptic integral of the first kind around m=1.py"
                ]
              ],
              [
                "Error Function and Fresnel Integrals",
                [
                  "dawsn Dawson\u2019s integral.py",
                  "erf Returns the error function of complex argument.py",
                  "erf_zeros Compute nt complex zeros of the error function erf(z).py",
                  "erfc Complementary error function, $1 - mathrm{erf}(x)$.py",
                  "erfcinv Inverse function for erfc.py",
                  "erfcx Scaled complementary error function, $exp(x^2), mathrm{erfc}(x)$.py",
                  "erfi Imaginary error function, $-i, mathrm{erf}(i, z)$.py",
                  "erfinv Inverse function for erf.py",
                  "fresnel Fresnel sin and cos integrals.py",
                  "fresnel_zeros Compute nt complex zeros of the sine and cosine Fresnel integrals S(z) and C(z).py",
                  "fresnelc_zeros Compute nt complex zeros of the cosine Fresnel integral C(z).py",
                  "fresnels_zeros Compute nt complex zeros of the sine Fresnel integral S(z).py",
                  "modfresnelm Modified Fresnel negative integrals.py",
                  "modfresnelp Modified Fresnel positive integrals.py",
                  "wofz Faddeeva function.py"
                ]
              ],
              [
                "Gamma and Related Functions",
                [
                  "beta Beta function.py",
                  "betainc Incomplete beta integral.py",
                  "betaincinv Inverse function to beta integral.py",
                  "betaln Natural logarithm of absolute value of beta function.py",
                  "digamma Digamma function.py",
                  "gamma Gamma function.py",
                  "gammainc Incomplete gamma function.py",
                  "gammaincc Complemented incomplete gamma integral.py",
                  "gammainccinv Inverse to gammaincc.py",
                  "gammaincinv Inverse to gammainc.py",
                  "gammaln Logarithm of absolute value of gamma function.py",
                  "gammasgn Sign of the gamma function.py",
                  "multigammaln Returns the log of multivariate gamma, also sometimes called the generalized gamma.py",
                  "polygamma Polygamma function which is the $n$th derivative of the digamma (psi) function.py",
                  "psi Digamma function.py",
                  "rgamma Gamma function inverted.py"
                ]
              ],
              [
                "Hypergeometric Functions",
                [
                  "hyp0f1 Confluent hypergeometric limit function ${}_0F_1$.py",
                  "hyp1f1 Confluent hypergeometric function ${}_1F_1(a, b; x)$.py",
                  "hyp1f2 Hypergeometric function ${}_1F_2$ and error estimate.py",
                  "hyp2f0 Hypergeometric function ${}_2F_0$ in $y$ and an error estimate.py",
                  "hyp2f1 Gauss hypergeometric function ${}_2F_1(a, b; c; z)$.py",
                  "hyp3f0 Hypergeometric function ${}_3F_0$ in $y$ and an error estimate.py",
                  "hyperu Confluent hypergeometric function $U(a, b, x)$ of the second kind.py"
                ]
              ],
              [
                "Information Theory Functions",
                [
                  "entr Elementwise function for computing entropy.py",
                  "huber Huber loss function.py",
                  "kl_div Elementwise function for computing Kullback-Leibler divergence.py",
                  "pseudo_huber Pseudo-Huber loss function.py",
                  "rel_entr Elementwise function for computing relative entropy.py"
                ]
              ],
              [
                "Kelvin Functions",
                [
                  "bei Kelvin function bei.py",
                  "bei_zeros Compute nt zeros of the Kelvin function bei x.py",
                  "beip Derivative of the Kelvin function bei.py",
                  "beip_zeros Compute nt zeros of the Kelvin function bei\u2019 x.py",
                  "ber Kelvin function ber.py",
                  "ber_zeros Compute nt zeros of the Kelvin function ber x.py",
                  "berp Derivative of the Kelvin function ber.py",
                  "berp_zeros Compute nt zeros of the Kelvin function ber\u2019 x.py",
                  "kei Kelvin function ker.py",
                  "kei_zeros Compute nt zeros of the Kelvin function kei x.py",
                  "keip Derivative of the Kelvin function kei.py",
                  "keip_zeros Compute nt zeros of the Kelvin function kei\u2019 x.py",
                  "kelvin Kelvin functions as complex numbers.py",
                  "kelvin_zeros Compute nt zeros of all the Kelvin functions returned in a length 8 tuple of arrays of length nt.py",
                  "ker Kelvin function ker.py",
                  "ker_zeros Compute nt zeros of the Kelvin function ker x.py",
                  "kerp Derivative of the Kelvin function ker.py",
                  "kerp_zeros Compute nt zeros of the Kelvin function ker\u2019 x.py"
                ]
              ],
              [
                "Legendre Functions",
                [
                  "clpmn Associated Legendre function of the first kind, $P_{m,n}(z)$.py",
                  "lpmn Associated Legendre function of the first kind, $P_{m,n}(z)$.py",
                  "lpmv Associated legendre function of integer order.py",
                  "lpn Compute sequence of Legendre functions of the first kind (polynomials), $P_n(z)$ and derivatives for all degrees from 0 to $n$ (inclusive).py",
                  "lqmn Associated Legendre functions of the second kind, $Q_{m,n}(z)$ and its derivative, $Q_{m,n}'(z)$ of order $m$ and degree $n$.py",
                  "lqn Compute sequence of Legendre functions of the second kind, $Q_n(z)$ and derivatives for all degrees from 0 to $n$ (inclusive).py",
                  "sph_harm Spherical harmonic of degree $n geq 0$ and order $m leq n$.py"
                ]
              ],
              [
                "Mathieu and Related Functions",
                [
                  "mathieu_a Characteristic value of even Mathieu functions.py",
                  "mathieu_b Characteristic value of odd Mathieu functions.py",
                  "mathieu_cem Even Mathieu function and its derivative.py",
                  "mathieu_even_coef Compute expansion coefficients for even Mathieu functions and modified Mathieu functions.py",
                  "mathieu_modcem1 Even modified Mathieu function of the first kind and its derivative.py",
                  "mathieu_modcem2 Even modified Mathieu function of the second kind and its derivative.py",
                  "mathieu_modsem1 Odd modified Mathieu function of the first kind and its derivative.py",
                  "mathieu_modsem2 Odd modified Mathieu function of the second kind and its derivative.py",
                  "mathieu_odd_coef Compute expansion coefficients for even Mathieu functions and modified Mathieu functions.py",
                  "mathieu_sem Odd Mathieu function and its derivative.py"
                ]
              ],
              [
                "Orthogonal polynomials",
                [
                  "assoc_laguerre Returns the $n$th order generalized (associated) Laguerre polynomial.py",
                  "chebyc Coefficients of the $n$th order Chebyshev polynomial of first kind, $C_n(x)$.py",
                  "chebys Coefficients of the $n$th order Chebyshev polynomial of second kind, $S_n$(x).py",
                  "chebyt Coefficients of the $n$th order Chebyshev polynomial of first kind, $T_n(x)$.py",
                  "chebyu Coefficients of the $n$th order Chebyshev polynomial of second kind, $U_n(x)$.py",
                  "eval_chebyc Evaluate Chebyshev $C$ polynomial at a point.py",
                  "eval_chebys Evaluate Chebyshev $S$ polynomial at a point.py",
                  "eval_chebyt Evaluate Chebyshev $T$ polynomial at a point.py",
                  "eval_chebyu Evaluate Chebyshev $U$ polynomial at a point.py",
                  "eval_gegenbauer Evaluate Gegenbauer polynomial at a point.py",
                  "eval_genlaguerre Evaluate generalized Laguerre polynomial at a point.py",
                  "eval_hermite Evaluate Hermite polynomial at a point.py",
                  "eval_hermitenorm Evaluate normalized Hermite polynomial at a point.py",
                  "eval_jacobi Evaluate Jacobi polynomial at a point.py",
                  "eval_laguerre Evaluate Laguerre polynomial at a point.py",
                  "eval_legendre Evaluate Legendre polynomial at a point.py",
                  "eval_sh_chebyt Evaluate shifted Chebyshev $T$ polynomial at a point.py",
                  "eval_sh_chebyu Evaluate shifted Chebyshev $U$ polynomial at a point.py",
                  "eval_sh_jacobi Evaluate shifted Jacobi polynomial at a point.py",
                  "eval_sh_legendre Evaluate shifted Legendre polynomial at a point.py",
                  "gegenbauer Coefficients of the $n$th order Gegenbauer (ultraspherical) polynomial,.py",
                  "genlaguerre Coefficients of the $n$th order generalized (associated) Laguerre polynomial,.py",
                  "hermite Coefficients of the $n$th order Hermite polynomial, $H_n(x)$, orthogonal over.py",
                  "hermitenorm Coefficients of the $n$th order normalized Hermite polynomial, $He_n(x)$, orthogonal.py",
                  "jacobi Coefficients of the $n$th order Jacobi polynomial, $P^(alpha,beta)_n(x)$ orthogonal over [-1,1] with weighting function $(1-x)^alpha (1+x)^beta$ with $alpha,beta  -1$.py",
                  "laguerre Coefficients of the $n$th order Laguerre polynoimal, $L_n(x)$.py",
                  "legendre Coefficients of the $n$th order Legendre polynomial, $P_n(x)$.py",
                  "sh_chebyt Coefficients of $n$th order shifted Chebyshev polynomial of first kind, $T_n(x)$.py",
                  "sh_chebyu Coefficients of the $n$th order shifted Chebyshev polynomial of second kind, $U_n(x)$.py",
                  "sh_jacobi Coefficients of the $n$th order Jacobi polynomial, $G_n(p,q,x)$ orthogonal over [0,1] with weighting function $(1-x)^{p-q} x^{q-1}$ with $pq-1$ and $q  0$.py",
                  "sh_legendre Coefficients of the $n$th order shifted Legendre polynomial, $P^ast_n(x)$.py"
                ]
              ],
              [
                "Other Special Functions",
                [
                  "agm Arithmetic, Geometric Mean.py",
                  "bernoulli Return an array of the Bernoulli numbers $B_0$, ..., $B_n$ (inclusive).py",
                  "binom Binomial coefficient.py",
                  "diric Returns the periodic sinc function, also called the Dirichlet function.py",
                  "euler Return an array of the Euler numbers $E_0$, ..., $E_n$ (inclusive).py",
                  "exp1 Exponential integral $E_1$ of complex argument $z$.py",
                  "expi Exponential integral $mathrm{Ei}$.py",
                  "expn Exponential integral $E_n$.py",
                  "factorial The factorial function, $n! = Gamma(n+1)$.py",
                  "factorial2 Double factorial $n!!$.py",
                  "factorialk $n(!!...!)$ = multifactorial of order $k$.py",
                  "lambertw Lambert $W$ function [R497].py",
                  "shichi Hyperbolic sine and cosine integrals.py",
                  "sici Sine and cosine integrals.py",
                  "spence Dilogarithm integral.py",
                  "zeta Hurwitz $zeta$ function.py",
                  "zetac Riemann $zeta$ function minus 1.py"
                ]
              ],
              [
                "Parabolic Cylinder Functions",
                [
                  "pbdn_seq $D_0(x), ..., D_n(x)$ and $D_0'(x), ..., D_n'(x)$.py",
                  "pbdv Parabolic cylinder function $D$.py",
                  "pbdv_seq $D_{v_0}(x), ..., D_v(x)$ and $D_{v_0}'(x), ..., D_v'(x)$ with $v_0=v-lfloor v rfloor$.py",
                  "pbvv Parabolic cylinder function $V$.py",
                  "pbvv_seq $V_{v_0}(x), ..., V_v(x)$ and $V_{v_0}'(x), ..., V_v'(x)$ with $v_0=v-lfloor v rfloor$.py",
                  "pbwa Parabolic cylinder function $W$.py"
                ]
              ],
              "Setup.py",
              [
                "Spheroidal Wave Functions",
                [
                  "obl_ang1 Oblate spheroidal angular function of the first kind and its derivative.py",
                  "obl_ang1_cv Oblate spheroidal angular function obl_ang1 for precomputed characteristic value.py",
                  "obl_cv Characteristic value of oblate spheroidal function.py",
                  "obl_cv_seq Compute a sequence of characteristic values for the oblate spheroidal wave functions for mode m and n\u2019=m..n and spheroidal parameter c.py",
                  "obl_rad1 Oblate spheroidal radial function of the first kind and its derivative.py",
                  "obl_rad1_cv Oblate spheroidal radial function obl_rad1 for precomputed characteristic value.py",
                  "obl_rad2 Oblate spheroidal radial function of the second kind and its derivative.py",
                  "obl_rad2_cv Oblate spheroidal radial function obl_rad2 for precomputed characteristic value.py",
                  "pro_ang1 Prolate spheroidal angular function of the first kind and its derivative.py",
                  "pro_ang1_cv Prolate spheroidal angular function pro_ang1 for precomputed characteristic value.py",
                  "pro_cv Characteristic value of prolate spheroidal function.py",
                  "pro_cv_seq Compute a sequence of characteristic values for the prolate spheroidal wave functions for mode m and n\u2019=m..n and spheroidal parameter c.py",
                  "pro_rad1 Prolate spheroidal radial function of the first kind and its derivative.py",
                  "pro_rad1_cv Prolate spheroidal radial function pro_rad1 for precomputed characteristic value.py",
                  "pro_rad2 Prolate spheroidal radial function of the secon kind and its derivative.py",
                  "pro_rad2_cv Prolate spheroidal radial function pro_rad2 for precomputed characteristic value.py"
                ]
              ],
              [
                "Statistical Functions (see also scipy.stats)",
                [
                  "bdtr Binomial distribution cumulative distribution function.py",
                  "bdtrc Binomial distribution survival function.py",
                  "bdtri Inverse function to bdtr vs.py",
                  "boxcox Compute the Box-Cox transformation.py",
                  "boxcox1p Compute the Box-Cox transformation of 1 + x.py",
                  "btdtr Cumulative beta distribution.py",
                  "btdtri p-th quantile of the beta distribution.py",
                  "chdtr Chi square cumulative distribution function.py",
                  "chdtrc Chi square survival function.py",
                  "chdtri Inverse to chdtrc.py",
                  "expit Expit ufunc for ndarrays.py",
                  "fdtr F cumulative distribution function.py",
                  "fdtrc F survival function.py",
                  "fdtri Inverse to fdtr vs x.py",
                  "gdtr Gamma distribution cumulative density function.py",
                  "gdtrc Gamma distribution survival function.py",
                  "gdtria Inverse of gdtr vs a.py",
                  "gdtrib Inverse of gdtr vs b.py",
                  "gdtrix Inverse of gdtr vs x.py",
                  "kolmogi Inverse function to kolmogorov.py",
                  "kolmogorov Complementary cumulative distribution function of Kolmogorov distribution.py",
                  "logit Logit ufunc for ndarrays.py",
                  "nbdtr Negative binomial cumulative distribution function.py",
                  "nbdtrc Negative binomial survival function.py",
                  "nbdtri Inverse of nbdtr vs p.py",
                  "ncfdtr Cumulative distribution function of the non-central $F$ distribution.py",
                  "ncfdtri Inverse cumulative distribution function of the non-central $F$ distribution.py",
                  "ncfdtridfd Calculate degrees of freedom (denominator) for the noncentral $F$ distribution.py",
                  "ncfdtridfn Calculate degrees of freedom (numerator) for the noncentral $F$ distribution.py",
                  "ncfdtrinc Calculate non-centrality parameter for non-central $F$ distribution.py",
                  "nctdtr Cumulative distribution function of the non-central $t$ distribution.py",
                  "nctdtridf Calculate degrees of freedom for non-central $t$ distribution.py",
                  "nctdtrinc Calculate non-centrality parameter for non-central $t$ distribution.py",
                  "nctdtrit Inverse cumulative distribution function of the non-central $t$ distribution.py",
                  "ndtr Gaussian cumulative distribution function.py",
                  "ndtri Inverse of ndtr vs x.py",
                  "nrdtrimn Calculate mean of normal distribution given other params.py",
                  "nrdtrisd Calculate standard deviation of normal distribution given other params.py",
                  "pdtr Poisson cumulative distribution function.py",
                  "pdtrc Poisson survival function.py",
                  "pdtri Inverse to pdtr vs m.py",
                  "smirnov Kolmogorov-Smirnov complementary cumulative distribution function.py",
                  "smirnovi Inverse to smirnov.py",
                  "stdtr Student $t$ distribution cumulative density function.py",
                  "stdtridf Inverse of stdtr vs df.py",
                  "stdtrit Inverse of stdtr vs t.py",
                  "tklmbda Tukey-Lambda cumulative distribution function.py"
                ]
              ],
              [
                "Struve Functions",
                [
                  "it2struve0 Integral related to Struve function of order 0.py",
                  "itmodstruve0 Integral of the modified Struve function of order 0.py",
                  "itstruve0 Integral of the Struve function of order 0.py",
                  "modstruve Modified Struve function.py",
                  "struve Struve function.py"
                ]
              ]
            ]
          ],
          [
            "Statistical distributions and functions",
            [
              "Setup.py"
            ]
          ]
        ]
      ],
      [
        "SymPy",
        [
          [
            "Calculus",
            [
              "Definite integral.py",
              "Differentiate multiple times.py",
              "Differentiate once.py",
              "Double integral.py",
              "Finite differences.py",
              "Indefinite integral.py",
              "Limits.py",
              "Mixed partial derivatives.py",
              "Series expansion, removing order term.py",
              "Series expansion.py",
              "Summations.py"
            ]
          ],
          [
            "Constants",
            [
              "1.py",
              "12.py",
              "Base of natural logarithm, (e).py",
              "Catalan's constant, (K).py",
              "Complex infinity, (tilde{infty}).py",
              "Euler-Mascheroni constant, (gamma).py",
              "Geometric constant, (pi).py",
              "Golden ratio, (phi).py",
              "Infinity, (infty).py",
              "NaN.py",
              "Rational numbers.py",
              "Unit imaginary number, (i).py"
            ]
          ],
          [
            "Functions",
            [
              [
                "Combinatorial functions",
                [
                  "Bell number.py",
                  "Bell polynomial of the second kind.py",
                  "Bell polynomial.py",
                  "Bernoulli number.py",
                  "Bernoulli polynomial.py",
                  "Binomial coefficient (nCk).py",
                  "Catalan number.py",
                  "Double factorial.py",
                  "Euler number.py",
                  "Factorial.py",
                  "Falling factorial.py",
                  "Fibonacci number.py",
                  "Fibonacci polynomial.py",
                  "Generalized harmonic number.py",
                  "Harmonic number.py",
                  "Lucas number.py",
                  "Number of combinations of length k among n items.py",
                  "Number of partitions of length k among n items.py",
                  "Number of permutations of length k among n items.py",
                  "Reduced Stirling number of the second kind.py",
                  "Rising factorial.py",
                  "Stirling number of the first kind.py",
                  "Stirling number of the second kind.py"
                ]
              ],
              [
                "Elementary functions",
                [
                  "Abs.py",
                  "Identity function.py",
                  "Lambert W (a.k.a. product logarithm).py",
                  "Max.py",
                  "Min.py",
                  "Piecewise.py",
                  "Product logarithm.py",
                  "acos.py",
                  "acosh.py",
                  "acot.py",
                  "acoth.py",
                  "arg.py",
                  "asin.py",
                  "asinh.py",
                  "atan.py",
                  "atan2.py",
                  "atanh.py",
                  "ceiling.py",
                  "conjugate.py",
                  "cos.py",
                  "cosh.py",
                  "cot.py",
                  "coth.py",
                  "exp.py",
                  "floor.py",
                  "im.py",
                  "log.py",
                  "re.py",
                  "root.py",
                  "sign.py",
                  "sin.py",
                  "sinh.py",
                  "sqrt.py",
                  "tan.py",
                  "tanh.py"
                ]
              ],
              [
                "Special functions",
                [
                  [
                    "Airy Functions",
                    [
                      "Airy function of the first kind.py",
                      "Airy function of the second kind.py",
                      "Derivative of the Airy function of the first kind.py",
                      "Derivative of the Airy function of the second kind.py"
                    ]
                  ],
                  [
                    "B-Splines",
                    [
                      "The B-splines at x of degree d with given knots.py",
                      "The n-th B-spline at x of degree d with given knots.py"
                    ]
                  ],
                  [
                    "Bessel Type Functions",
                    [
                      "Bessel function of the first kind.py",
                      "Bessel function of the second kind.py",
                      "Hankel function of the first kind.py",
                      "Hankel function of the second kind.py",
                      "Modified Bessel function of the first kind.py",
                      "Modified Bessel function of the second kind.py",
                      "Spherical Bessel function of the first kind.py",
                      "Spherical Bessel function of the second kind.py",
                      "Zeros of the spherical Bessel function of the first kind.py"
                    ]
                  ],
                  "Derivative of Dirac delta function.py",
                  "Dirac delta function.py",
                  [
                    "Elliptic integrals",
                    [
                      "Complete elliptic integral of the first kind.py",
                      "Legendre incomplete elliptic integral of the first kind.py",
                      "Legendre incomplete elliptic integral of the second kind.py",
                      "Legendre incomplete elliptic integral of the third kind.py"
                    ]
                  ],
                  [
                    "Error Functions and Fresnel Integrals",
                    [
                      "Complementary error function.py",
                      "Fresnel integral C.py",
                      "Fresnel integral S.py",
                      "Gauss error function.py",
                      "Imaginary error function.py",
                      "Inverse complementary error function.py",
                      "Inverse error function.py",
                      "Inverse two-argument error function.py",
                      "Two-argument error function.py"
                    ]
                  ],
                  [
                    "Exponential, Logarithmic and Trigonometric Integrals",
                    [
                      "Classical logarithmic integral.py",
                      "Cosine integral.py",
                      "Exponential integral.py",
                      "Generalised exponential integral.py",
                      "Hyperbolic cosine integral.py",
                      "Hyperbolic sine integral.py",
                      "Offset logarithmic integral.py",
                      "Sine integral.py",
                      "Special case of the generalised exponential integral.py"
                    ]
                  ],
                  [
                    "Gamma, Beta and related Functions",
                    [
                      "Digamma function.py",
                      "Euler Beta function.py",
                      "Gamma function.py",
                      "Log Gamma function.py",
                      "Lower incomplete gamma function.py",
                      "Polygamma function.py",
                      "Trigamma function.py",
                      "Upper incomplete gamma function.py"
                    ]
                  ],
                  "Heaviside function.py",
                  [
                    "Hypergeometric Functions",
                    [
                      "Generalized hypergeometric function.py",
                      "Meijer G-function.py"
                    ]
                  ],
                  [
                    "Orthogonal Polynomials",
                    [
                      "Associated Legendre polynomial.py",
                      "Chebyshev polynomial of the first kind.py",
                      "Chebyshev polynomial of the second kind.py",
                      "Gegenbauer polynomial.py",
                      "Generalized (associated) Laguerre polynomial.py",
                      "Hermite polynomial.py",
                      "Jacobi polynomial.py",
                      "Laguerre polynomial.py",
                      "Legendre polynomial.py",
                      "Normalized Jacobi polynomial.py",
                      "Root k of the nth Chebyshev polynomial of the first kind.py",
                      "Root k of the nth Chebyshev polynomial of the second kind.py"
                    ]
                  ],
                  [
                    "Riemann Zeta and Related Functions",
                    [
                      "Dirichlet eta function.py",
                      "Hurwitz zeta function.py",
                      "Lerch transcendent (Lerch phi function).py",
                      "Polylogarithm function.py",
                      "Riemann zeta function.py"
                    ]
                  ],
                  [
                    "Spherical Harmonics",
                    [
                      "Conjugate spherical harmonics.py",
                      "Real spherical harmonics.py",
                      "Spherical harmonics.py"
                    ]
                  ],
                  [
                    "Tensor Functions",
                    [
                      "Kronecker delta.py",
                      "Levi-Civita symbol.py"
                    ]
                  ]
                ]
              ]
            ]
          ],
          [
            "Manipulating expressions",
            [
              [
                "Collect terms",
                [
                  "Collect and apply function to each coefficient.py",
                  "Collect as coefficients of multiple factors.py",
                  "Collect as coefficients of one factor.py",
                  "Collect constants.py",
                  "Collect with respect to wild card.py",
                  "Recursively collect.py"
                ]
              ],
              [
                "Evaluation",
                [
                  "Create numpy function for efficient evaluation.py",
                  "Evaluate numerically to arbitrary precision.py",
                  "Evaluate numerically to python float.py"
                ]
              ],
              [
                "Expansion",
                [
                  "Expand basic expressions.py",
                  "Expand only addition in exponents.py",
                  "Expand only functions.py",
                  "Expand only hypergeometric functions.py",
                  "Expand only logarithms.py",
                  "Expand only multinomials.py",
                  "Expand only multiplication over addition.py",
                  "Expand only powers of multiplied bases.py",
                  "Expand only real and imaginary parts.py",
                  "Expand only trig.py",
                  "Expand, including complex parts.py",
                  "Expand, including functions.py",
                  "Expand, including trig.py"
                ]
              ],
              [
                "Exponentials and Logarithms",
                [
                  "Combine exponentials.py",
                  "Combine logarithms for general arguments.py",
                  "Combine logarithms, forcing assumptions.py",
                  "Expand logarithms for general arguments.py",
                  "Expand logarithms, forcing assumptions.py",
                  "Simplification, possibly to trig functions.py"
                ]
              ],
              [
                "Miscellaneous",
                [
                  "Expand gamma functions.py",
                  "Simplify Bessel functions.py",
                  "Simplify binomials.py",
                  "Simplify factorials.py",
                  "Simplify numerical expressions to exact values.py"
                ]
              ],
              [
                "Polynomials",
                [
                  "Collect common powers of a term.py",
                  "Extract coefficient of a term.py",
                  "Factor polynomial over rationals.py"
                ]
              ],
              [
                "Powers",
                [
                  "Collect exponents on powers for general arguments.py",
                  "Collect exponents on powers, forcing assumptions and polar simplifications.py",
                  "Collect exponents on powers, forcing assumptions.py",
                  "Denest square-roots.py",
                  "Expand powers by exponent for general arguments.py",
                  "Expand powers of multiplied bases, forcing assumptions.py",
                  "Simplify powers for general arguments.py",
                  "Simplify powers, forcing assumptions.py"
                ]
              ],
              [
                "Rational functions",
                [
                  "Cancel.py",
                  "Decompose into partial fractions.py",
                  "Join over common denominator.py",
                  "Remove square roots from denominator.py"
                ]
              ],
              [
                "Refine, using assumptions",
                [
                  [
                    "List of assumptions",
                    [
                      "Algebraic.py",
                      "Antihermitian.py",
                      "Bounded.py",
                      "Commutative.py",
                      "Complex.py",
                      "Composite.py",
                      "Even.py",
                      "Extended real.py",
                      "Finite.py",
                      "Hermitian.py",
                      "Imaginary.py",
                      "Infinite.py",
                      "Infinitesimal.py",
                      "Integer.py",
                      "Irrational.py",
                      "Negative.py",
                      "Nonnegative.py",
                      "Nonpositive.py",
                      "Nonzero.py",
                      "Odd.py",
                      "Positive.py",
                      "Prime.py",
                      "Rational.py",
                      "Real.py",
                      "Transcendental.py",
                      "Zero.py"
                    ]
                  ],
                  "Refine in context manager.py",
                  "Refine.py"
                ]
              ],
              "Simplify.py",
              [
                "Substitutions and replacements",
                [
                  "Replace a pattern with an object.py",
                  "Replace a pattern with some function of that object.py",
                  "Replace anything with some function of that thing.py",
                  "Replace exact subexpressions.py",
                  "Replace one object with another.py",
                  "Replace one object with some function of its arguments.py",
                  "Substitute multiple subexpressions simultaneously.py",
                  "Substitute multiple subexpressions successively.py",
                  "Substitute one subexpression for another.py"
                ]
              ],
              [
                "Trigonometric functions",
                [
                  "Expansion.py",
                  "Simplification, possibly to exponentials.py",
                  "Simplification.py"
                ]
              ]
            ]
          ],
          "Setup.py",
          [
            "Solvers",
            [
              "Solve differential equation.py",
              "Solve for one variable.py",
              "Solve for two variables.py"
            ]
          ]
        ]
      ],
      [
        "h5py",
        [
          "Close a file.py",
          "Get array.py",
          "Get scalar.py",
          "Open a file.py",
          "Setup.py"
        ]
      ],
      [
        "numba",
        [
          "Jit function with specified signature.py",
          "Jit function.py",
          "Setup.py"
        ]
      ]
    ]
  ]
]
